
#
# Sample WT_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_WT_1_5N_LN_2$V_CALL, "3-7")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_37_seq_WT_1_5N_LN_2 <- loc_WT_1_5N_LN_2
pull_37_seq_WT_1_5N_LN_2 <- mutate(pull_37_seq_WT_1_5N_LN_2, Vk3_7 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_37_seq_WT_1_5N_LN_2 <- filter(pull_37_seq_WT_1_5N_LN_2, Vk3_7==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_37_seq_WT_1_5N_LN_2 <- select(pull_37_seq_WT_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_37_seq_WT_1_5N_LN_2, "pull_37_seq_WT_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_WT_1_5N_LN_2_vk37 <- countGenes(pull_37_seq_WT_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_WT_1_5N_LN_2_vk37$GENE <- gsubGene2NumJ(linear_WT_1_5N_LN_2_vk37$GENE)
linear_WT_1_5N_LN_2_vk37 <- linear_WT_1_5N_LN_2_vk37[mixedorder(linear_WT_1_5N_LN_2_vk37$GENE, decreasing=TRUE),]
linear_WT_1_5N_LN_2_vk37$GENE <- gsubNum2GeneJ(linear_WT_1_5N_LN_2_vk37$GENE)
linear_WT_1_5N_LN_2_vk37$GENE <- factor(linear_WT_1_5N_LN_2_vk37$GENE, levels = linear_WT_1_5N_LN_2_vk37$GENE)
#
# Sample RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5N_LN_2$V_CALL, "3-7")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_37_seq_RAG_1_5N_LN_2 <- loc_RAG_1_5N_LN_2
pull_37_seq_RAG_1_5N_LN_2 <- mutate(pull_37_seq_RAG_1_5N_LN_2, Vk3_7 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_37_seq_RAG_1_5N_LN_2 <- filter(pull_37_seq_RAG_1_5N_LN_2, Vk3_7==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_37_seq_RAG_1_5N_LN_2 <- select(pull_37_seq_RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_37_seq_RAG_1_5N_LN_2, "pull_37_seq_RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5N_LN_2_vk37 <- countGenes(pull_37_seq_RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5N_LN_2_vk37$GENE <- gsubGene2NumJ(linear_RAG_1_5N_LN_2_vk37$GENE)
linear_RAG_1_5N_LN_2_vk37 <- linear_RAG_1_5N_LN_2_vk37[mixedorder(linear_RAG_1_5N_LN_2_vk37$GENE, decreasing=TRUE),]
linear_RAG_1_5N_LN_2_vk37$GENE <- gsubNum2GeneJ(linear_RAG_1_5N_LN_2_vk37$GENE)
linear_RAG_1_5N_LN_2_vk37$GENE <- factor(linear_RAG_1_5N_LN_2_vk37$GENE, levels = linear_RAG_1_5N_LN_2_vk37$GENE)
#
# Sample RAG_1_5P_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LN_2$V_CALL, "3-7")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_37_seq_RAG_1_5P_LN_2 <- loc_RAG_1_5P_LN_2
pull_37_seq_RAG_1_5P_LN_2 <- mutate(pull_37_seq_RAG_1_5P_LN_2, Vk3_7 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_37_seq_RAG_1_5P_LN_2 <- filter(pull_37_seq_RAG_1_5P_LN_2, Vk3_7==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_37_seq_RAG_1_5P_LN_2 <- select(pull_37_seq_RAG_1_5P_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_37_seq_RAG_1_5P_LN_2, "pull_37_seq_RAG_1_5P_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LN_2_vk37 <- countGenes(pull_37_seq_RAG_1_5P_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LN_2_vk37$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LN_2_vk37$GENE)
linear_RAG_1_5P_LN_2_vk37 <- linear_RAG_1_5P_LN_2_vk37[mixedorder(linear_RAG_1_5P_LN_2_vk37$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LN_2_vk37$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LN_2_vk37$GENE)
linear_RAG_1_5P_LN_2_vk37$GENE <- factor(linear_RAG_1_5P_LN_2_vk37$GENE, levels = linear_RAG_1_5P_LN_2_vk37$GENE)
#
# Sample RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LP_2$V_CALL, "3-7")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_37_seq_RAG_1_5P_LP_2 <- loc_RAG_1_5P_LP_2
pull_37_seq_RAG_1_5P_LP_2 <- mutate(pull_37_seq_RAG_1_5P_LP_2, Vk3_7 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_37_seq_RAG_1_5P_LP_2 <- filter(pull_37_seq_RAG_1_5P_LP_2, Vk3_7==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_37_seq_RAG_1_5P_LP_2 <- select(pull_37_seq_RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_37_seq_RAG_1_5P_LP_2, "pull_37_seq_RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LP_2_vk37 <- countGenes(pull_37_seq_RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LP_2_vk37$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LP_2_vk37$GENE)
linear_RAG_1_5P_LP_2_vk37 <- linear_RAG_1_5P_LP_2_vk37[mixedorder(linear_RAG_1_5P_LP_2_vk37$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LP_2_vk37$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LP_2_vk37$GENE)
linear_RAG_1_5P_LP_2_vk37$GENE <- factor(linear_RAG_1_5P_LP_2_vk37$GENE, levels = linear_RAG_1_5P_LP_2_vk37$GENE)
#
# Sample VH12_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5N_LN_2$V_CALL, "3-7")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_37_seq_VH12_1_5N_LN_2 <- loc_VH12_1_5N_LN_2
pull_37_seq_VH12_1_5N_LN_2 <- mutate(pull_37_seq_VH12_1_5N_LN_2, Vk3_7 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_37_seq_VH12_1_5N_LN_2 <- filter(pull_37_seq_VH12_1_5N_LN_2, Vk3_7==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_37_seq_VH12_1_5N_LN_2 <- select(pull_37_seq_VH12_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_37_seq_VH12_1_5N_LN_2, "pull_37_seq_VH12_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5N_LN_2_vk37 <- countGenes(pull_37_seq_VH12_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5N_LN_2_vk37$GENE <- gsubGene2NumJ(linear_VH12_1_5N_LN_2_vk37$GENE)
linear_VH12_1_5N_LN_2_vk37 <- linear_VH12_1_5N_LN_2_vk37[mixedorder(linear_VH12_1_5N_LN_2_vk37$GENE, decreasing=TRUE),]
linear_VH12_1_5N_LN_2_vk37$GENE <- gsubNum2GeneJ(linear_VH12_1_5N_LN_2_vk37$GENE)
linear_VH12_1_5N_LN_2_vk37$GENE <- factor(linear_VH12_1_5N_LN_2_vk37$GENE, levels = linear_VH12_1_5N_LN_2_vk37$GENE)
#
# Sample VH12_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5P_LP_2$V_CALL, "3-7")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_37_seq_VH12_1_5P_LP_2 <- loc_VH12_1_5P_LP_2
pull_37_seq_VH12_1_5P_LP_2 <- mutate(pull_37_seq_VH12_1_5P_LP_2, Vk3_7 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_37_seq_VH12_1_5P_LP_2 <- filter(pull_37_seq_VH12_1_5P_LP_2, Vk3_7==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_37_seq_VH12_1_5P_LP_2 <- select(pull_37_seq_VH12_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_37_seq_VH12_1_5P_LP_2, "pull_37_seq_VH12_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5P_LP_2_vk37 <- countGenes(pull_37_seq_VH12_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5P_LP_2_vk37$GENE <- gsubGene2NumJ(linear_VH12_1_5P_LP_2_vk37$GENE)
linear_VH12_1_5P_LP_2_vk37 <- linear_VH12_1_5P_LP_2_vk37[mixedorder(linear_VH12_1_5P_LP_2_vk37$GENE, decreasing=TRUE),]
linear_VH12_1_5P_LP_2_vk37$GENE <- gsubNum2GeneJ(linear_VH12_1_5P_LP_2_vk37$GENE)
linear_VH12_1_5P_LP_2_vk37$GENE <- factor(linear_VH12_1_5P_LP_2_vk37$GENE, levels = linear_VH12_1_5P_LP_2_vk37$GENE)
#
# Sample VH12RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5N_LN_2$V_CALL, "3-7")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_37_seq_VH12RAG_1_5N_LN_2 <- loc_VH12RAG_1_5N_LN_2
pull_37_seq_VH12RAG_1_5N_LN_2 <- mutate(pull_37_seq_VH12RAG_1_5N_LN_2, Vk3_7 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_37_seq_VH12RAG_1_5N_LN_2 <- filter(pull_37_seq_VH12RAG_1_5N_LN_2, Vk3_7==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_37_seq_VH12RAG_1_5N_LN_2 <- select(pull_37_seq_VH12RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_37_seq_VH12RAG_1_5N_LN_2, "pull_37_seq_VH12RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5N_LN_2_vk37 <- countGenes(pull_37_seq_VH12RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5N_LN_2_vk37$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5N_LN_2_vk37$GENE)
linear_VH12RAG_1_5N_LN_2_vk37 <- linear_VH12RAG_1_5N_LN_2_vk37[mixedorder(linear_VH12RAG_1_5N_LN_2_vk37$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5N_LN_2_vk37$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5N_LN_2_vk37$GENE)
linear_VH12RAG_1_5N_LN_2_vk37$GENE <- factor(linear_VH12RAG_1_5N_LN_2_vk37$GENE, levels = linear_VH12RAG_1_5N_LN_2_vk37$GENE)
#
# Sample VH12RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5P_LP_2$V_CALL, "3-7")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_37_seq_VH12RAG_1_5P_LP_2 <- loc_VH12RAG_1_5P_LP_2
pull_37_seq_VH12RAG_1_5P_LP_2 <- mutate(pull_37_seq_VH12RAG_1_5P_LP_2, Vk3_7 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_37_seq_VH12RAG_1_5P_LP_2 <- filter(pull_37_seq_VH12RAG_1_5P_LP_2, Vk3_7==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_37_seq_VH12RAG_1_5P_LP_2 <- select(pull_37_seq_VH12RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_37_seq_VH12RAG_1_5P_LP_2, "pull_37_seq_VH12RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5P_LP_2_vk37 <- countGenes(pull_37_seq_VH12RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5P_LP_2_vk37$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5P_LP_2_vk37$GENE)
linear_VH12RAG_1_5P_LP_2_vk37 <- linear_VH12RAG_1_5P_LP_2_vk37[mixedorder(linear_VH12RAG_1_5P_LP_2_vk37$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5P_LP_2_vk37$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5P_LP_2_vk37$GENE)
linear_VH12RAG_1_5P_LP_2_vk37$GENE <- factor(linear_VH12RAG_1_5P_LP_2_vk37$GENE, levels = linear_VH12RAG_1_5P_LP_2_vk37$GENE)
#
#
# Vk 4-86
#
# Sample WT_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_WT_1_5N_LN_2$V_CALL, "4-86")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_486_seq_WT_1_5N_LN_2 <- loc_WT_1_5N_LN_2
pull_486_seq_WT_1_5N_LN_2 <- mutate(pull_486_seq_WT_1_5N_LN_2, Vk4_86 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_486_seq_WT_1_5N_LN_2 <- filter(pull_486_seq_WT_1_5N_LN_2, Vk4_86==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_486_seq_WT_1_5N_LN_2 <- select(pull_486_seq_WT_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_486_seq_WT_1_5N_LN_2, "pull_486_seq_WT_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_WT_1_5N_LN_2_vk486 <- countGenes(pull_486_seq_WT_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_WT_1_5N_LN_2_vk486$GENE <- gsubGene2NumJ(linear_WT_1_5N_LN_2_vk486$GENE)
linear_WT_1_5N_LN_2_vk486 <- linear_WT_1_5N_LN_2_vk486[mixedorder(linear_WT_1_5N_LN_2_vk486$GENE, decreasing=TRUE),]
linear_WT_1_5N_LN_2_vk486$GENE <- gsubNum2GeneJ(linear_WT_1_5N_LN_2_vk486$GENE)
linear_WT_1_5N_LN_2_vk486$GENE <- factor(linear_WT_1_5N_LN_2_vk486$GENE, levels = linear_WT_1_5N_LN_2_vk486$GENE)
#
# Sample RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5N_LN_2$V_CALL, "4-86")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_486_seq_RAG_1_5N_LN_2 <- loc_RAG_1_5N_LN_2
pull_486_seq_RAG_1_5N_LN_2 <- mutate(pull_486_seq_RAG_1_5N_LN_2, Vk4_86 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_486_seq_RAG_1_5N_LN_2 <- filter(pull_486_seq_RAG_1_5N_LN_2, Vk4_86==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_486_seq_RAG_1_5N_LN_2 <- select(pull_486_seq_RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_486_seq_RAG_1_5N_LN_2, "pull_486_seq_RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5N_LN_2_vk486 <- countGenes(pull_486_seq_RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5N_LN_2_vk486$GENE <- gsubGene2NumJ(linear_RAG_1_5N_LN_2_vk486$GENE)
linear_RAG_1_5N_LN_2_vk486 <- linear_RAG_1_5N_LN_2_vk486[mixedorder(linear_RAG_1_5N_LN_2_vk486$GENE, decreasing=TRUE),]
linear_RAG_1_5N_LN_2_vk486$GENE <- gsubNum2GeneJ(linear_RAG_1_5N_LN_2_vk486$GENE)
linear_RAG_1_5N_LN_2_vk486$GENE <- factor(linear_RAG_1_5N_LN_2_vk486$GENE, levels = linear_RAG_1_5N_LN_2_vk486$GENE)
#
# Sample RAG_1_5P_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LN_2$V_CALL, "4-86")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_486_seq_RAG_1_5P_LN_2 <- loc_RAG_1_5P_LN_2
pull_486_seq_RAG_1_5P_LN_2 <- mutate(pull_486_seq_RAG_1_5P_LN_2, Vk4_86 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_486_seq_RAG_1_5P_LN_2 <- filter(pull_486_seq_RAG_1_5P_LN_2, Vk4_86==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_486_seq_RAG_1_5P_LN_2 <- select(pull_486_seq_RAG_1_5P_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_486_seq_RAG_1_5P_LN_2, "pull_486_seq_RAG_1_5P_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LN_2_vk486 <- countGenes(pull_486_seq_RAG_1_5P_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LN_2_vk486$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LN_2_vk486$GENE)
linear_RAG_1_5P_LN_2_vk486 <- linear_RAG_1_5P_LN_2_vk486[mixedorder(linear_RAG_1_5P_LN_2_vk486$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LN_2_vk486$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LN_2_vk486$GENE)
linear_RAG_1_5P_LN_2_vk486$GENE <- factor(linear_RAG_1_5P_LN_2_vk486$GENE, levels = linear_RAG_1_5P_LN_2_vk486$GENE)
#
# Sample RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LP_2$V_CALL, "4-86")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_486_seq_RAG_1_5P_LP_2 <- loc_RAG_1_5P_LP_2
pull_486_seq_RAG_1_5P_LP_2 <- mutate(pull_486_seq_RAG_1_5P_LP_2, Vk4_86 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_486_seq_RAG_1_5P_LP_2 <- filter(pull_486_seq_RAG_1_5P_LP_2, Vk4_86==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_486_seq_RAG_1_5P_LP_2 <- select(pull_486_seq_RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_486_seq_RAG_1_5P_LP_2, "pull_486_seq_RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LP_2_vk486 <- countGenes(pull_486_seq_RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LP_2_vk486$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LP_2_vk486$GENE)
linear_RAG_1_5P_LP_2_vk486 <- linear_RAG_1_5P_LP_2_vk486[mixedorder(linear_RAG_1_5P_LP_2_vk486$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LP_2_vk486$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LP_2_vk486$GENE)
linear_RAG_1_5P_LP_2_vk486$GENE <- factor(linear_RAG_1_5P_LP_2_vk486$GENE, levels = linear_RAG_1_5P_LP_2_vk486$GENE)
#
# Sample VH12_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5N_LN_2$V_CALL, "4-86")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_486_seq_VH12_1_5N_LN_2 <- loc_VH12_1_5N_LN_2
pull_486_seq_VH12_1_5N_LN_2 <- mutate(pull_486_seq_VH12_1_5N_LN_2, Vk4_86 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_486_seq_VH12_1_5N_LN_2 <- filter(pull_486_seq_VH12_1_5N_LN_2, Vk4_86==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_486_seq_VH12_1_5N_LN_2 <- select(pull_486_seq_VH12_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_486_seq_VH12_1_5N_LN_2, "pull_486_seq_VH12_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5N_LN_2_vk486 <- countGenes(pull_486_seq_VH12_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5N_LN_2_vk486$GENE <- gsubGene2NumJ(linear_VH12_1_5N_LN_2_vk486$GENE)
linear_VH12_1_5N_LN_2_vk486 <- linear_VH12_1_5N_LN_2_vk486[mixedorder(linear_VH12_1_5N_LN_2_vk486$GENE, decreasing=TRUE),]
linear_VH12_1_5N_LN_2_vk486$GENE <- gsubNum2GeneJ(linear_VH12_1_5N_LN_2_vk486$GENE)
linear_VH12_1_5N_LN_2_vk486$GENE <- factor(linear_VH12_1_5N_LN_2_vk486$GENE, levels = linear_VH12_1_5N_LN_2_vk486$GENE)
#
# Sample VH12_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5P_LP_2$V_CALL, "4-86")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_486_seq_VH12_1_5P_LP_2 <- loc_VH12_1_5P_LP_2
pull_486_seq_VH12_1_5P_LP_2 <- mutate(pull_486_seq_VH12_1_5P_LP_2, Vk4_86 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_486_seq_VH12_1_5P_LP_2 <- filter(pull_486_seq_VH12_1_5P_LP_2, Vk4_86==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_486_seq_VH12_1_5P_LP_2 <- select(pull_486_seq_VH12_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_486_seq_VH12_1_5P_LP_2, "pull_486_seq_VH12_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5P_LP_2_vk486 <- countGenes(pull_486_seq_VH12_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5P_LP_2_vk486$GENE <- gsubGene2NumJ(linear_VH12_1_5P_LP_2_vk486$GENE)
linear_VH12_1_5P_LP_2_vk486 <- linear_VH12_1_5P_LP_2_vk486[mixedorder(linear_VH12_1_5P_LP_2_vk486$GENE, decreasing=TRUE),]
linear_VH12_1_5P_LP_2_vk486$GENE <- gsubNum2GeneJ(linear_VH12_1_5P_LP_2_vk486$GENE)
linear_VH12_1_5P_LP_2_vk486$GENE <- factor(linear_VH12_1_5P_LP_2_vk486$GENE, levels = linear_VH12_1_5P_LP_2_vk486$GENE)
#
# Sample VH12RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5N_LN_2$V_CALL, "4-86")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_486_seq_VH12RAG_1_5N_LN_2 <- loc_VH12RAG_1_5N_LN_2
pull_486_seq_VH12RAG_1_5N_LN_2 <- mutate(pull_486_seq_VH12RAG_1_5N_LN_2, Vk4_86 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_486_seq_VH12RAG_1_5N_LN_2 <- filter(pull_486_seq_VH12RAG_1_5N_LN_2, Vk4_86==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_486_seq_VH12RAG_1_5N_LN_2 <- select(pull_486_seq_VH12RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_486_seq_VH12RAG_1_5N_LN_2, "pull_486_seq_VH12RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5N_LN_2_vk486 <- countGenes(pull_486_seq_VH12RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5N_LN_2_vk486$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5N_LN_2_vk486$GENE)
linear_VH12RAG_1_5N_LN_2_vk486 <- linear_VH12RAG_1_5N_LN_2_vk486[mixedorder(linear_VH12RAG_1_5N_LN_2_vk486$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5N_LN_2_vk486$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5N_LN_2_vk486$GENE)
linear_VH12RAG_1_5N_LN_2_vk486$GENE <- factor(linear_VH12RAG_1_5N_LN_2_vk486$GENE, levels = linear_VH12RAG_1_5N_LN_2_vk486$GENE)
#
# Sample VH12RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5P_LP_2$V_CALL, "4-86")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_486_seq_VH12RAG_1_5P_LP_2 <- loc_VH12RAG_1_5P_LP_2
pull_486_seq_VH12RAG_1_5P_LP_2 <- mutate(pull_486_seq_VH12RAG_1_5P_LP_2, Vk4_86 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_486_seq_VH12RAG_1_5P_LP_2 <- filter(pull_486_seq_VH12RAG_1_5P_LP_2, Vk4_86==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_486_seq_VH12RAG_1_5P_LP_2 <- select(pull_486_seq_VH12RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_486_seq_VH12RAG_1_5P_LP_2, "pull_486_seq_VH12RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5P_LP_2_vk486 <- countGenes(pull_486_seq_VH12RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5P_LP_2_vk486$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5P_LP_2_vk486$GENE)
linear_VH12RAG_1_5P_LP_2_vk486 <- linear_VH12RAG_1_5P_LP_2_vk486[mixedorder(linear_VH12RAG_1_5P_LP_2_vk486$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5P_LP_2_vk486$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5P_LP_2_vk486$GENE)
linear_VH12RAG_1_5P_LP_2_vk486$GENE <- factor(linear_VH12RAG_1_5P_LP_2_vk486$GENE, levels = linear_VH12RAG_1_5P_LP_2_vk486$GENE)
#
# Vk 4-91
#
# Sample WT_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_WT_1_5N_LN_2$V_CALL, "4-91")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_491_seq_WT_1_5N_LN_2 <- loc_WT_1_5N_LN_2
pull_491_seq_WT_1_5N_LN_2 <- mutate(pull_491_seq_WT_1_5N_LN_2, Vk4_91 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_491_seq_WT_1_5N_LN_2 <- filter(pull_491_seq_WT_1_5N_LN_2, Vk4_91==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_491_seq_WT_1_5N_LN_2 <- select(pull_491_seq_WT_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_491_seq_WT_1_5N_LN_2, "pull_491_seq_WT_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_WT_1_5N_LN_2_vk491 <- countGenes(pull_491_seq_WT_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_WT_1_5N_LN_2_vk491$GENE <- gsubGene2NumJ(linear_WT_1_5N_LN_2_vk491$GENE)
linear_WT_1_5N_LN_2_vk491 <- linear_WT_1_5N_LN_2_vk491[mixedorder(linear_WT_1_5N_LN_2_vk491$GENE, decreasing=TRUE),]
linear_WT_1_5N_LN_2_vk491$GENE <- gsubNum2GeneJ(linear_WT_1_5N_LN_2_vk491$GENE)
linear_WT_1_5N_LN_2_vk491$GENE <- factor(linear_WT_1_5N_LN_2_vk491$GENE, levels = linear_WT_1_5N_LN_2_vk491$GENE)
#
# Sample RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5N_LN_2$V_CALL, "4-91")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_491_seq_RAG_1_5N_LN_2 <- loc_RAG_1_5N_LN_2
pull_491_seq_RAG_1_5N_LN_2 <- mutate(pull_491_seq_RAG_1_5N_LN_2, Vk4_91 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_491_seq_RAG_1_5N_LN_2 <- filter(pull_491_seq_RAG_1_5N_LN_2, Vk4_91==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_491_seq_RAG_1_5N_LN_2 <- select(pull_491_seq_RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_491_seq_RAG_1_5N_LN_2, "pull_491_seq_RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5N_LN_2_vk491 <- countGenes(pull_491_seq_RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5N_LN_2_vk491$GENE <- gsubGene2NumJ(linear_RAG_1_5N_LN_2_vk491$GENE)
linear_RAG_1_5N_LN_2_vk491 <- linear_RAG_1_5N_LN_2_vk491[mixedorder(linear_RAG_1_5N_LN_2_vk491$GENE, decreasing=TRUE),]
linear_RAG_1_5N_LN_2_vk491$GENE <- gsubNum2GeneJ(linear_RAG_1_5N_LN_2_vk491$GENE)
linear_RAG_1_5N_LN_2_vk491$GENE <- factor(linear_RAG_1_5N_LN_2_vk491$GENE, levels = linear_RAG_1_5N_LN_2_vk491$GENE)
#
# Sample RAG_1_5P_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LN_2$V_CALL, "4-91")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_491_seq_RAG_1_5P_LN_2 <- loc_RAG_1_5P_LN_2
pull_491_seq_RAG_1_5P_LN_2 <- mutate(pull_491_seq_RAG_1_5P_LN_2, Vk4_91 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_491_seq_RAG_1_5P_LN_2 <- filter(pull_491_seq_RAG_1_5P_LN_2, Vk4_91==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_491_seq_RAG_1_5P_LN_2 <- select(pull_491_seq_RAG_1_5P_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_491_seq_RAG_1_5P_LN_2, "pull_491_seq_RAG_1_5P_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LN_2_vk491 <- countGenes(pull_491_seq_RAG_1_5P_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LN_2_vk491$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LN_2_vk491$GENE)
linear_RAG_1_5P_LN_2_vk491 <- linear_RAG_1_5P_LN_2_vk491[mixedorder(linear_RAG_1_5P_LN_2_vk491$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LN_2_vk491$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LN_2_vk491$GENE)
linear_RAG_1_5P_LN_2_vk491$GENE <- factor(linear_RAG_1_5P_LN_2_vk491$GENE, levels = linear_RAG_1_5P_LN_2_vk491$GENE)
#
# Sample RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LP_2$V_CALL, "4-91")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_491_seq_RAG_1_5P_LP_2 <- loc_RAG_1_5P_LP_2
pull_491_seq_RAG_1_5P_LP_2 <- mutate(pull_491_seq_RAG_1_5P_LP_2, Vk4_91 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_491_seq_RAG_1_5P_LP_2 <- filter(pull_491_seq_RAG_1_5P_LP_2, Vk4_91==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_491_seq_RAG_1_5P_LP_2 <- select(pull_491_seq_RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_491_seq_RAG_1_5P_LP_2, "pull_491_seq_RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LP_2_vk491 <- countGenes(pull_491_seq_RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LP_2_vk491$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LP_2_vk491$GENE)
linear_RAG_1_5P_LP_2_vk491 <- linear_RAG_1_5P_LP_2_vk491[mixedorder(linear_RAG_1_5P_LP_2_vk491$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LP_2_vk491$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LP_2_vk491$GENE)
linear_RAG_1_5P_LP_2_vk491$GENE <- factor(linear_RAG_1_5P_LP_2_vk491$GENE, levels = linear_RAG_1_5P_LP_2_vk491$GENE)
#
# Sample VH12_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5N_LN_2$V_CALL, "4-91")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_491_seq_VH12_1_5N_LN_2 <- loc_VH12_1_5N_LN_2
pull_491_seq_VH12_1_5N_LN_2 <- mutate(pull_491_seq_VH12_1_5N_LN_2, Vk4_91 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_491_seq_VH12_1_5N_LN_2 <- filter(pull_491_seq_VH12_1_5N_LN_2, Vk4_91==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_491_seq_VH12_1_5N_LN_2 <- select(pull_491_seq_VH12_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_491_seq_VH12_1_5N_LN_2, "pull_491_seq_VH12_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5N_LN_2_vk491 <- countGenes(pull_491_seq_VH12_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5N_LN_2_vk491$GENE <- gsubGene2NumJ(linear_VH12_1_5N_LN_2_vk491$GENE)
linear_VH12_1_5N_LN_2_vk491 <- linear_VH12_1_5N_LN_2_vk491[mixedorder(linear_VH12_1_5N_LN_2_vk491$GENE, decreasing=TRUE),]
linear_VH12_1_5N_LN_2_vk491$GENE <- gsubNum2GeneJ(linear_VH12_1_5N_LN_2_vk491$GENE)
linear_VH12_1_5N_LN_2_vk491$GENE <- factor(linear_VH12_1_5N_LN_2_vk491$GENE, levels = linear_VH12_1_5N_LN_2_vk491$GENE)
#
# Sample VH12_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5P_LP_2$V_CALL, "4-91")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_491_seq_VH12_1_5P_LP_2 <- loc_VH12_1_5P_LP_2
pull_491_seq_VH12_1_5P_LP_2 <- mutate(pull_491_seq_VH12_1_5P_LP_2, Vk4_91 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_491_seq_VH12_1_5P_LP_2 <- filter(pull_491_seq_VH12_1_5P_LP_2, Vk4_91==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_491_seq_VH12_1_5P_LP_2 <- select(pull_491_seq_VH12_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_491_seq_VH12_1_5P_LP_2, "pull_491_seq_VH12_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5P_LP_2_vk491 <- countGenes(pull_491_seq_VH12_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5P_LP_2_vk491$GENE <- gsubGene2NumJ(linear_VH12_1_5P_LP_2_vk491$GENE)
linear_VH12_1_5P_LP_2_vk491 <- linear_VH12_1_5P_LP_2_vk491[mixedorder(linear_VH12_1_5P_LP_2_vk491$GENE, decreasing=TRUE),]
linear_VH12_1_5P_LP_2_vk491$GENE <- gsubNum2GeneJ(linear_VH12_1_5P_LP_2_vk491$GENE)
linear_VH12_1_5P_LP_2_vk491$GENE <- factor(linear_VH12_1_5P_LP_2_vk491$GENE, levels = linear_VH12_1_5P_LP_2_vk491$GENE)
#
# Sample VH12RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5N_LN_2$V_CALL, "4-91")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_491_seq_VH12RAG_1_5N_LN_2 <- loc_VH12RAG_1_5N_LN_2
pull_491_seq_VH12RAG_1_5N_LN_2 <- mutate(pull_491_seq_VH12RAG_1_5N_LN_2, Vk4_91 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_491_seq_VH12RAG_1_5N_LN_2 <- filter(pull_491_seq_VH12RAG_1_5N_LN_2, Vk4_91==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_491_seq_VH12RAG_1_5N_LN_2 <- select(pull_491_seq_VH12RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_491_seq_VH12RAG_1_5N_LN_2, "pull_491_seq_VH12RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5N_LN_2_vk491 <- countGenes(pull_491_seq_VH12RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5N_LN_2_vk491$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5N_LN_2_vk491$GENE)
linear_VH12RAG_1_5N_LN_2_vk491 <- linear_VH12RAG_1_5N_LN_2_vk491[mixedorder(linear_VH12RAG_1_5N_LN_2_vk491$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5N_LN_2_vk491$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5N_LN_2_vk491$GENE)
linear_VH12RAG_1_5N_LN_2_vk491$GENE <- factor(linear_VH12RAG_1_5N_LN_2_vk491$GENE, levels = linear_VH12RAG_1_5N_LN_2_vk491$GENE)
#
# Sample VH12RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5P_LP_2$V_CALL, "4-91")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_491_seq_VH12RAG_1_5P_LP_2 <- loc_VH12RAG_1_5P_LP_2
pull_491_seq_VH12RAG_1_5P_LP_2 <- mutate(pull_491_seq_VH12RAG_1_5P_LP_2, Vk4_91 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_491_seq_VH12RAG_1_5P_LP_2 <- filter(pull_491_seq_VH12RAG_1_5P_LP_2, Vk4_91==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_491_seq_VH12RAG_1_5P_LP_2 <- select(pull_491_seq_VH12RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_491_seq_VH12RAG_1_5P_LP_2, "pull_491_seq_VH12RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5P_LP_2_vk491 <- countGenes(pull_491_seq_VH12RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5P_LP_2_vk491$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5P_LP_2_vk491$GENE)
linear_VH12RAG_1_5P_LP_2_vk491 <- linear_VH12RAG_1_5P_LP_2_vk491[mixedorder(linear_VH12RAG_1_5P_LP_2_vk491$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5P_LP_2_vk491$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5P_LP_2_vk491$GENE)
linear_VH12RAG_1_5P_LP_2_vk491$GENE <- factor(linear_VH12RAG_1_5P_LP_2_vk491$GENE, levels = linear_VH12RAG_1_5P_LP_2_vk491$GENE)
#
# Vk 1-110
#
# Sample WT_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_WT_1_5N_LN_2$V_CALL, "1-110")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_1110_seq_WT_1_5N_LN_2 <- loc_WT_1_5N_LN_2
pull_1110_seq_WT_1_5N_LN_2 <- mutate(pull_1110_seq_WT_1_5N_LN_2, Vk1_110 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_1110_seq_WT_1_5N_LN_2 <- filter(pull_1110_seq_WT_1_5N_LN_2, Vk1_110==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_1110_seq_WT_1_5N_LN_2 <- select(pull_1110_seq_WT_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_1110_seq_WT_1_5N_LN_2, "pull_1110_seq_WT_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_WT_1_5N_LN_2_vk1110 <- countGenes(pull_1110_seq_WT_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_WT_1_5N_LN_2_vk1110$GENE <- gsubGene2NumJ(linear_WT_1_5N_LN_2_vk1110$GENE)
linear_WT_1_5N_LN_2_vk1110 <- linear_WT_1_5N_LN_2_vk1110[mixedorder(linear_WT_1_5N_LN_2_vk1110$GENE, decreasing=TRUE),]
linear_WT_1_5N_LN_2_vk1110$GENE <- gsubNum2GeneJ(linear_WT_1_5N_LN_2_vk1110$GENE)
linear_WT_1_5N_LN_2_vk1110$GENE <- factor(linear_WT_1_5N_LN_2_vk1110$GENE, levels = linear_WT_1_5N_LN_2_vk1110$GENE)
#
# Sample RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5N_LN_2$V_CALL, "1-110")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_1110_seq_RAG_1_5N_LN_2 <- loc_RAG_1_5N_LN_2
pull_1110_seq_RAG_1_5N_LN_2 <- mutate(pull_1110_seq_RAG_1_5N_LN_2, Vk1_110 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_1110_seq_RAG_1_5N_LN_2 <- filter(pull_1110_seq_RAG_1_5N_LN_2, Vk1_110==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_1110_seq_RAG_1_5N_LN_2 <- select(pull_1110_seq_RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_1110_seq_RAG_1_5N_LN_2, "pull_1110_seq_RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5N_LN_2_vk1110 <- countGenes(pull_1110_seq_RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5N_LN_2_vk1110$GENE <- gsubGene2NumJ(linear_RAG_1_5N_LN_2_vk1110$GENE)
linear_RAG_1_5N_LN_2_vk1110 <- linear_RAG_1_5N_LN_2_vk1110[mixedorder(linear_RAG_1_5N_LN_2_vk1110$GENE, decreasing=TRUE),]
linear_RAG_1_5N_LN_2_vk1110$GENE <- gsubNum2GeneJ(linear_RAG_1_5N_LN_2_vk1110$GENE)
linear_RAG_1_5N_LN_2_vk1110$GENE <- factor(linear_RAG_1_5N_LN_2_vk1110$GENE, levels = linear_RAG_1_5N_LN_2_vk1110$GENE)
#
# Sample RAG_1_5P_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LN_2$V_CALL, "1-110")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_1110_seq_RAG_1_5P_LN_2 <- loc_RAG_1_5P_LN_2
pull_1110_seq_RAG_1_5P_LN_2 <- mutate(pull_1110_seq_RAG_1_5P_LN_2, Vk1_110 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_1110_seq_RAG_1_5P_LN_2 <- filter(pull_1110_seq_RAG_1_5P_LN_2, Vk1_110==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_1110_seq_RAG_1_5P_LN_2 <- select(pull_1110_seq_RAG_1_5P_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_1110_seq_RAG_1_5P_LN_2, "pull_1110_seq_RAG_1_5P_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LN_2_vk1110 <- countGenes(pull_1110_seq_RAG_1_5P_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LN_2_vk1110$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LN_2_vk1110$GENE)
linear_RAG_1_5P_LN_2_vk1110 <- linear_RAG_1_5P_LN_2_vk1110[mixedorder(linear_RAG_1_5P_LN_2_vk1110$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LN_2_vk1110$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LN_2_vk1110$GENE)
linear_RAG_1_5P_LN_2_vk1110$GENE <- factor(linear_RAG_1_5P_LN_2_vk1110$GENE, levels = linear_RAG_1_5P_LN_2_vk1110$GENE)
#
# Sample RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LP_2$V_CALL, "1-110")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_1110_seq_RAG_1_5P_LP_2 <- loc_RAG_1_5P_LP_2
pull_1110_seq_RAG_1_5P_LP_2 <- mutate(pull_1110_seq_RAG_1_5P_LP_2, Vk1_110 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_1110_seq_RAG_1_5P_LP_2 <- filter(pull_1110_seq_RAG_1_5P_LP_2, Vk1_110==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_1110_seq_RAG_1_5P_LP_2 <- select(pull_1110_seq_RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_1110_seq_RAG_1_5P_LP_2, "pull_1110_seq_RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LP_2_vk1110 <- countGenes(pull_1110_seq_RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LP_2_vk1110$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LP_2_vk1110$GENE)
linear_RAG_1_5P_LP_2_vk1110 <- linear_RAG_1_5P_LP_2_vk1110[mixedorder(linear_RAG_1_5P_LP_2_vk1110$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LP_2_vk1110$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LP_2_vk1110$GENE)
linear_RAG_1_5P_LP_2_vk1110$GENE <- factor(linear_RAG_1_5P_LP_2_vk1110$GENE, levels = linear_RAG_1_5P_LP_2_vk1110$GENE)
#
# Sample VH12_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5N_LN_2$V_CALL, "1-110")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_1110_seq_VH12_1_5N_LN_2 <- loc_VH12_1_5N_LN_2
pull_1110_seq_VH12_1_5N_LN_2 <- mutate(pull_1110_seq_VH12_1_5N_LN_2, Vk1_110 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_1110_seq_VH12_1_5N_LN_2 <- filter(pull_1110_seq_VH12_1_5N_LN_2, Vk1_110==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_1110_seq_VH12_1_5N_LN_2 <- select(pull_1110_seq_VH12_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_1110_seq_VH12_1_5N_LN_2, "pull_1110_seq_VH12_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5N_LN_2_vk1110 <- countGenes(pull_1110_seq_VH12_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5N_LN_2_vk1110$GENE <- gsubGene2NumJ(linear_VH12_1_5N_LN_2_vk1110$GENE)
linear_VH12_1_5N_LN_2_vk1110 <- linear_VH12_1_5N_LN_2_vk1110[mixedorder(linear_VH12_1_5N_LN_2_vk1110$GENE, decreasing=TRUE),]
linear_VH12_1_5N_LN_2_vk1110$GENE <- gsubNum2GeneJ(linear_VH12_1_5N_LN_2_vk1110$GENE)
linear_VH12_1_5N_LN_2_vk1110$GENE <- factor(linear_VH12_1_5N_LN_2_vk1110$GENE, levels = linear_VH12_1_5N_LN_2_vk1110$GENE)
#
# Sample VH12_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5P_LP_2$V_CALL, "1-110")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_1110_seq_VH12_1_5P_LP_2 <- loc_VH12_1_5P_LP_2
pull_1110_seq_VH12_1_5P_LP_2 <- mutate(pull_1110_seq_VH12_1_5P_LP_2, Vk1_110 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_1110_seq_VH12_1_5P_LP_2 <- filter(pull_1110_seq_VH12_1_5P_LP_2, Vk1_110==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_1110_seq_VH12_1_5P_LP_2 <- select(pull_1110_seq_VH12_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_1110_seq_VH12_1_5P_LP_2, "pull_1110_seq_VH12_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5P_LP_2_vk1110 <- countGenes(pull_1110_seq_VH12_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5P_LP_2_vk1110$GENE <- gsubGene2NumJ(linear_VH12_1_5P_LP_2_vk1110$GENE)
linear_VH12_1_5P_LP_2_vk1110 <- linear_VH12_1_5P_LP_2_vk1110[mixedorder(linear_VH12_1_5P_LP_2_vk1110$GENE, decreasing=TRUE),]
linear_VH12_1_5P_LP_2_vk1110$GENE <- gsubNum2GeneJ(linear_VH12_1_5P_LP_2_vk1110$GENE)
linear_VH12_1_5P_LP_2_vk1110$GENE <- factor(linear_VH12_1_5P_LP_2_vk1110$GENE, levels = linear_VH12_1_5P_LP_2_vk1110$GENE)
#
# Sample VH12RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5N_LN_2$V_CALL, "1-110")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_1110_seq_VH12RAG_1_5N_LN_2 <- loc_VH12RAG_1_5N_LN_2
pull_1110_seq_VH12RAG_1_5N_LN_2 <- mutate(pull_1110_seq_VH12RAG_1_5N_LN_2, Vk1_110 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_1110_seq_VH12RAG_1_5N_LN_2 <- filter(pull_1110_seq_VH12RAG_1_5N_LN_2, Vk1_110==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_1110_seq_VH12RAG_1_5N_LN_2 <- select(pull_1110_seq_VH12RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_1110_seq_VH12RAG_1_5N_LN_2, "pull_1110_seq_VH12RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5N_LN_2_vk1110 <- countGenes(pull_1110_seq_VH12RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5N_LN_2_vk1110$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5N_LN_2_vk1110$GENE)
linear_VH12RAG_1_5N_LN_2_vk1110 <- linear_VH12RAG_1_5N_LN_2_vk1110[mixedorder(linear_VH12RAG_1_5N_LN_2_vk1110$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5N_LN_2_vk1110$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5N_LN_2_vk1110$GENE)
linear_VH12RAG_1_5N_LN_2_vk1110$GENE <- factor(linear_VH12RAG_1_5N_LN_2_vk1110$GENE, levels = linear_VH12RAG_1_5N_LN_2_vk1110$GENE)
#
# Sample VH12RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5P_LP_2$V_CALL, "1-110")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_1110_seq_VH12RAG_1_5P_LP_2 <- loc_VH12RAG_1_5P_LP_2
pull_1110_seq_VH12RAG_1_5P_LP_2 <- mutate(pull_1110_seq_VH12RAG_1_5P_LP_2, Vk1_110 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_1110_seq_VH12RAG_1_5P_LP_2 <- filter(pull_1110_seq_VH12RAG_1_5P_LP_2, Vk1_110==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_1110_seq_VH12RAG_1_5P_LP_2 <- select(pull_1110_seq_VH12RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_1110_seq_VH12RAG_1_5P_LP_2, "pull_1110_seq_VH12RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5P_LP_2_vk1110 <- countGenes(pull_1110_seq_VH12RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5P_LP_2_vk1110$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5P_LP_2_vk1110$GENE)
linear_VH12RAG_1_5P_LP_2_vk1110 <- linear_VH12RAG_1_5P_LP_2_vk1110[mixedorder(linear_VH12RAG_1_5P_LP_2_vk1110$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5P_LP_2_vk1110$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5P_LP_2_vk1110$GENE)
linear_VH12RAG_1_5P_LP_2_vk1110$GENE <- factor(linear_VH12RAG_1_5P_LP_2_vk1110$GENE, levels = linear_VH12RAG_1_5P_LP_2_vk1110$GENE)
#
# Vk 14-126
#
# Sample WT_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_WT_1_5N_LN_2$V_CALL, "14-126")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_14126_seq_WT_1_5N_LN_2 <- loc_WT_1_5N_LN_2
pull_14126_seq_WT_1_5N_LN_2 <- mutate(pull_14126_seq_WT_1_5N_LN_2, Vk14_126 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_14126_seq_WT_1_5N_LN_2 <- filter(pull_14126_seq_WT_1_5N_LN_2, Vk14_126==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_14126_seq_WT_1_5N_LN_2 <- select(pull_14126_seq_WT_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_14126_seq_WT_1_5N_LN_2, "pull_14126_seq_WT_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_WT_1_5N_LN_2_vk14126 <- countGenes(pull_14126_seq_WT_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_WT_1_5N_LN_2_vk14126$GENE <- gsubGene2NumJ(linear_WT_1_5N_LN_2_vk14126$GENE)
linear_WT_1_5N_LN_2_vk14126 <- linear_WT_1_5N_LN_2_vk14126[mixedorder(linear_WT_1_5N_LN_2_vk14126$GENE, decreasing=TRUE),]
linear_WT_1_5N_LN_2_vk14126$GENE <- gsubNum2GeneJ(linear_WT_1_5N_LN_2_vk14126$GENE)
linear_WT_1_5N_LN_2_vk14126$GENE <- factor(linear_WT_1_5N_LN_2_vk14126$GENE, levels = linear_WT_1_5N_LN_2_vk14126$GENE)
#
# Sample RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5N_LN_2$V_CALL, "14-126")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_14126_seq_RAG_1_5N_LN_2 <- loc_RAG_1_5N_LN_2
pull_14126_seq_RAG_1_5N_LN_2 <- mutate(pull_14126_seq_RAG_1_5N_LN_2, Vk14_126 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_14126_seq_RAG_1_5N_LN_2 <- filter(pull_14126_seq_RAG_1_5N_LN_2, Vk14_126==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_14126_seq_RAG_1_5N_LN_2 <- select(pull_14126_seq_RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_14126_seq_RAG_1_5N_LN_2, "pull_14126_seq_RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5N_LN_2_vk14126 <- countGenes(pull_14126_seq_RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5N_LN_2_vk14126$GENE <- gsubGene2NumJ(linear_RAG_1_5N_LN_2_vk14126$GENE)
linear_RAG_1_5N_LN_2_vk14126 <- linear_RAG_1_5N_LN_2_vk14126[mixedorder(linear_RAG_1_5N_LN_2_vk14126$GENE, decreasing=TRUE),]
linear_RAG_1_5N_LN_2_vk14126$GENE <- gsubNum2GeneJ(linear_RAG_1_5N_LN_2_vk14126$GENE)
linear_RAG_1_5N_LN_2_vk14126$GENE <- factor(linear_RAG_1_5N_LN_2_vk14126$GENE, levels = linear_RAG_1_5N_LN_2_vk14126$GENE)
#
# Sample RAG_1_5P_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LN_2$V_CALL, "14-126")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_14126_seq_RAG_1_5P_LN_2 <- loc_RAG_1_5P_LN_2
pull_14126_seq_RAG_1_5P_LN_2 <- mutate(pull_14126_seq_RAG_1_5P_LN_2, Vk14_126 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_14126_seq_RAG_1_5P_LN_2 <- filter(pull_14126_seq_RAG_1_5P_LN_2, Vk14_126==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_14126_seq_RAG_1_5P_LN_2 <- select(pull_14126_seq_RAG_1_5P_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_14126_seq_RAG_1_5P_LN_2, "pull_14126_seq_RAG_1_5P_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LN_2_vk14126 <- countGenes(pull_14126_seq_RAG_1_5P_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LN_2_vk14126$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LN_2_vk14126$GENE)
linear_RAG_1_5P_LN_2_vk14126 <- linear_RAG_1_5P_LN_2_vk14126[mixedorder(linear_RAG_1_5P_LN_2_vk14126$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LN_2_vk14126$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LN_2_vk14126$GENE)
linear_RAG_1_5P_LN_2_vk14126$GENE <- factor(linear_RAG_1_5P_LN_2_vk14126$GENE, levels = linear_RAG_1_5P_LN_2_vk14126$GENE)
#
# Sample RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_RAG_1_5P_LP_2$V_CALL, "14-126")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_14126_seq_RAG_1_5P_LP_2 <- loc_RAG_1_5P_LP_2
pull_14126_seq_RAG_1_5P_LP_2 <- mutate(pull_14126_seq_RAG_1_5P_LP_2, Vk14_126 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_14126_seq_RAG_1_5P_LP_2 <- filter(pull_14126_seq_RAG_1_5P_LP_2, Vk14_126==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_14126_seq_RAG_1_5P_LP_2 <- select(pull_14126_seq_RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_14126_seq_RAG_1_5P_LP_2, "pull_14126_seq_RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_RAG_1_5P_LP_2_vk14126 <- countGenes(pull_14126_seq_RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_RAG_1_5P_LP_2_vk14126$GENE <- gsubGene2NumJ(linear_RAG_1_5P_LP_2_vk14126$GENE)
linear_RAG_1_5P_LP_2_vk14126 <- linear_RAG_1_5P_LP_2_vk14126[mixedorder(linear_RAG_1_5P_LP_2_vk14126$GENE, decreasing=TRUE),]
linear_RAG_1_5P_LP_2_vk14126$GENE <- gsubNum2GeneJ(linear_RAG_1_5P_LP_2_vk14126$GENE)
linear_RAG_1_5P_LP_2_vk14126$GENE <- factor(linear_RAG_1_5P_LP_2_vk14126$GENE, levels = linear_RAG_1_5P_LP_2_vk14126$GENE)
#
# Sample VH12_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5N_LN_2$V_CALL, "14-126")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_14126_seq_VH12_1_5N_LN_2 <- loc_VH12_1_5N_LN_2
pull_14126_seq_VH12_1_5N_LN_2 <- mutate(pull_14126_seq_VH12_1_5N_LN_2, Vk14_126 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_14126_seq_VH12_1_5N_LN_2 <- filter(pull_14126_seq_VH12_1_5N_LN_2, Vk14_126==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_14126_seq_VH12_1_5N_LN_2 <- select(pull_14126_seq_VH12_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_14126_seq_VH12_1_5N_LN_2, "pull_14126_seq_VH12_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5N_LN_2_vk14126 <- countGenes(pull_14126_seq_VH12_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5N_LN_2_vk14126$GENE <- gsubGene2NumJ(linear_VH12_1_5N_LN_2_vk14126$GENE)
linear_VH12_1_5N_LN_2_vk14126 <- linear_VH12_1_5N_LN_2_vk14126[mixedorder(linear_VH12_1_5N_LN_2_vk14126$GENE, decreasing=TRUE),]
linear_VH12_1_5N_LN_2_vk14126$GENE <- gsubNum2GeneJ(linear_VH12_1_5N_LN_2_vk14126$GENE)
linear_VH12_1_5N_LN_2_vk14126$GENE <- factor(linear_VH12_1_5N_LN_2_vk14126$GENE, levels = linear_VH12_1_5N_LN_2_vk14126$GENE)
#
# Sample VH12_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12_1_5P_LP_2$V_CALL, "14-126")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_14126_seq_VH12_1_5P_LP_2 <- loc_VH12_1_5P_LP_2
pull_14126_seq_VH12_1_5P_LP_2 <- mutate(pull_14126_seq_VH12_1_5P_LP_2, Vk14_126 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_14126_seq_VH12_1_5P_LP_2 <- filter(pull_14126_seq_VH12_1_5P_LP_2, Vk14_126==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_14126_seq_VH12_1_5P_LP_2 <- select(pull_14126_seq_VH12_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_14126_seq_VH12_1_5P_LP_2, "pull_14126_seq_VH12_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12_1_5P_LP_2_vk14126 <- countGenes(pull_14126_seq_VH12_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12_1_5P_LP_2_vk14126$GENE <- gsubGene2NumJ(linear_VH12_1_5P_LP_2_vk14126$GENE)
linear_VH12_1_5P_LP_2_vk14126 <- linear_VH12_1_5P_LP_2_vk14126[mixedorder(linear_VH12_1_5P_LP_2_vk14126$GENE, decreasing=TRUE),]
linear_VH12_1_5P_LP_2_vk14126$GENE <- gsubNum2GeneJ(linear_VH12_1_5P_LP_2_vk14126$GENE)
linear_VH12_1_5P_LP_2_vk14126$GENE <- factor(linear_VH12_1_5P_LP_2_vk14126$GENE, levels = linear_VH12_1_5P_LP_2_vk14126$GENE)
#
# Sample VH12RAG_1_5N_LN
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5N_LN_2$V_CALL, "14-126")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_14126_seq_VH12RAG_1_5N_LN_2 <- loc_VH12RAG_1_5N_LN_2
pull_14126_seq_VH12RAG_1_5N_LN_2 <- mutate(pull_14126_seq_VH12RAG_1_5N_LN_2, Vk14_126 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_14126_seq_VH12RAG_1_5N_LN_2 <- filter(pull_14126_seq_VH12RAG_1_5N_LN_2, Vk14_126==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_14126_seq_VH12RAG_1_5N_LN_2 <- select(pull_14126_seq_VH12RAG_1_5N_LN_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_14126_seq_VH12RAG_1_5N_LN_2, "pull_14126_seq_VH12RAG_1_5N_LN_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5N_LN_2_vk14126 <- countGenes(pull_14126_seq_VH12RAG_1_5N_LN_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5N_LN_2_vk14126$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5N_LN_2_vk14126$GENE)
linear_VH12RAG_1_5N_LN_2_vk14126 <- linear_VH12RAG_1_5N_LN_2_vk14126[mixedorder(linear_VH12RAG_1_5N_LN_2_vk14126$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5N_LN_2_vk14126$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5N_LN_2_vk14126$GENE)
linear_VH12RAG_1_5N_LN_2_vk14126$GENE <- factor(linear_VH12RAG_1_5N_LN_2_vk14126$GENE, levels = linear_VH12RAG_1_5N_LN_2_vk14126$GENE)
#
# Sample VH12RAG_1_5P_LP
#
# Identify sequences that use the Vk gene of interest 
#
z <- str_detect(loc_VH12RAG_1_5P_LP_2$V_CALL, "14-126")
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
pull_14126_seq_VH12RAG_1_5P_LP_2 <- loc_VH12RAG_1_5P_LP_2
pull_14126_seq_VH12RAG_1_5P_LP_2 <- mutate(pull_14126_seq_VH12RAG_1_5P_LP_2, Vk14_126 = z)
#
# Select only sequences that use the Vk gene of interest
#
pull_14126_seq_VH12RAG_1_5P_LP_2 <- filter(pull_14126_seq_VH12RAG_1_5P_LP_2, Vk14_126==TRUE)
#
# (optional) Select only the pertinent columns to decrease the size of the data frame
#
pull_14126_seq_VH12RAG_1_5P_LP_2 <- select(pull_14126_seq_VH12RAG_1_5P_LP_2, SEQUENCE_INPUT, FUNCTIONAL, V_CALL, J_CALL, SEQUENCE_VDJ, V_SEQ_START, V_SEQ_LENGTH, NP1_LENGTH, NP2_LENGTH, J_SEQ_START, J_SEQ_LENGTH, JUNCTION, JUNCTION_LENGTH, V_IDENTITY, J_IDENTITY, CDR3_IMGT, CDR3_AA)
#
# (optional) Create an space delimited text file that can be opened in microsoft Excel for manual analysis of sequences
# The resulting Excel spread sheet is used to look for and identify chimeric Vk sequences
#
write.table(pull_14126_seq_VH12RAG_1_5P_LP_2, "pull_14126_seq_VH12RAG_1_5P_LP_2.txt")
#
# Tabulate the usage counts and frequencies of the various Jk genes paired with Vk gene of interest
#
linear_VH12RAG_1_5P_LP_2_vk14126 <- countGenes(pull_14126_seq_VH12RAG_1_5P_LP_2, GENE = "J_CALL", mode = "gene")
#
# Reorder the list of genes based on their locations in the light chain loci
#
linear_VH12RAG_1_5P_LP_2_vk14126$GENE <- gsubGene2NumJ(linear_VH12RAG_1_5P_LP_2_vk14126$GENE)
linear_VH12RAG_1_5P_LP_2_vk14126 <- linear_VH12RAG_1_5P_LP_2_vk14126[mixedorder(linear_VH12RAG_1_5P_LP_2_vk14126$GENE, decreasing=TRUE),]
linear_VH12RAG_1_5P_LP_2_vk14126$GENE <- gsubNum2GeneJ(linear_VH12RAG_1_5P_LP_2_vk14126$GENE)
linear_VH12RAG_1_5P_LP_2_vk14126$GENE <- factor(linear_VH12RAG_1_5P_LP_2_vk14126$GENE, levels = linear_VH12RAG_1_5P_LP_2_vk14126$GENE)
#
# Vk 3-7
#
# WT_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_WT_1_5N_LN_2_vk37")==FALSE){
linear_WT_1_5N_LN_2_vk37 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_WT_1_5N_LN_2_vk37 <- linear_WT_1_5N_LN_2_vk37
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_WT_1_5N_LN_2_vk37$GENE)
if(str_detect(full_linear_WT_1_5N_LN_2_vk37$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_WT_1_5N_LN_2_vk37 <- add_row(full_linear_WT_1_5N_LN_2_vk37, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_WT_1_5N_LN_2_vk37$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_WT_1_5N_LN_2_vk37 <- add_row(full_linear_WT_1_5N_LN_2_vk37, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_WT_1_5N_LN_2_vk37 <- mutate(full_linear_WT_1_5N_LN_2_vk37, SAMPLE = "WT CD5- PtC-")
#
# RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5N_LN_2_vk37")==FALSE){
linear_RAG_1_5N_LN_2_vk37 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5N_LN_2_vk37 <- linear_RAG_1_5N_LN_2_vk37
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5N_LN_2_vk37$GENE)
if(str_detect(full_linear_RAG_1_5N_LN_2_vk37$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5N_LN_2_vk37 <- add_row(full_linear_RAG_1_5N_LN_2_vk37, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5N_LN_2_vk37$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5N_LN_2_vk37 <- add_row(full_linear_RAG_1_5N_LN_2_vk37, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5N_LN_2_vk37 <- mutate(full_linear_RAG_1_5N_LN_2_vk37, SAMPLE = "dnRAG1 CD5- PtC-")
#
# 5P LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LN_2_vk37")==FALSE){
linear_RAG_1_5P_LN_2_vk37 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LN_2_vk37 <- linear_RAG_1_5P_LN_2_vk37
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LN_2_vk37$GENE)
if(str_detect(full_linear_RAG_1_5P_LN_2_vk37$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LN_2_vk37 <- add_row(full_linear_RAG_1_5P_LN_2_vk37, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LN_2_vk37$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LN_2_vk37 <- add_row(full_linear_RAG_1_5P_LN_2_vk37, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LN_2_vk37 <- mutate(full_linear_RAG_1_5P_LN_2_vk37, SAMPLE = "dnRAG1 CD5+ PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LP_2_vk37")==FALSE){
linear_RAG_1_5P_LP_2_vk37 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LP_2_vk37 <- linear_RAG_1_5P_LP_2_vk37
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LP_2_vk37$GENE)
if(str_detect(full_linear_RAG_1_5P_LP_2_vk37$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LP_2_vk37 <- add_row(full_linear_RAG_1_5P_LP_2_vk37, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LP_2_vk37$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LP_2_vk37 <- add_row(full_linear_RAG_1_5P_LP_2_vk37, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LP_2_vk37 <- mutate(full_linear_RAG_1_5P_LP_2_vk37, SAMPLE = "dnRAG1 CD5+ PtC+")
#
# VH12_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5N_LN_2_vk37")==FALSE){
linear_VH12_1_5N_LN_2_vk37 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5N_LN_2_vk37 <- linear_VH12_1_5N_LN_2_vk37
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5N_LN_2_vk37$GENE)
if(str_detect(full_linear_VH12_1_5N_LN_2_vk37$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5N_LN_2_vk37 <- add_row(full_linear_VH12_1_5N_LN_2_vk37, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5N_LN_2_vk37$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5N_LN_2_vk37 <- add_row(full_linear_VH12_1_5N_LN_2_vk37, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5N_LN_2_vk37 <- mutate(full_linear_VH12_1_5N_LN_2_vk37, SAMPLE = "VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5P_LP_2_vk37")==FALSE){
linear_VH12_1_5P_LP_2_vk37 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5P_LP_2_vk37 <- linear_VH12_1_5P_LP_2_vk37
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5P_LP_2_vk37$GENE)
if(str_detect(full_linear_VH12_1_5P_LP_2_vk37$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5P_LP_2_vk37 <- add_row(full_linear_VH12_1_5P_LP_2_vk37, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5P_LP_2_vk37$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5P_LP_2_vk37 <- add_row(full_linear_VH12_1_5P_LP_2_vk37, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5P_LP_2_vk37 <- mutate(full_linear_VH12_1_5P_LP_2_vk37, SAMPLE = "VH12 CD5+ PtC+")
#
# VH12RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5N_LN_2_vk37")==FALSE){
linear_VH12RAG_1_5N_LN_2_vk37 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5N_LN_2_vk37 <- linear_VH12RAG_1_5N_LN_2_vk37
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5N_LN_2_vk37$GENE)
if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk37$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5N_LN_2_vk37 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk37, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk37$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5N_LN_2_vk37 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk37, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5N_LN_2_vk37 <- mutate(full_linear_VH12RAG_1_5N_LN_2_vk37, SAMPLE = "dnRAG1 VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5P_LP_2_vk37")==FALSE){
linear_VH12RAG_1_5P_LP_2_vk37 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5P_LP_2_vk37 <- linear_VH12RAG_1_5P_LP_2_vk37
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5P_LP_2_vk37$GENE)
if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk37$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5P_LP_2_vk37 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk37, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk37$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5P_LP_2_vk37 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk37, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5P_LP_2_vk37 <- mutate(full_linear_VH12RAG_1_5P_LP_2_vk37, SAMPLE = "dnRAG1 VH12 CD5+ PtC+")
#
#
# Vk 4-86
#
# WT_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_WT_1_5N_LN_2_vk486")==FALSE){
linear_WT_1_5N_LN_2_vk486 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_WT_1_5N_LN_2_vk486 <- linear_WT_1_5N_LN_2_vk486
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_WT_1_5N_LN_2_vk486$GENE)
if(str_detect(full_linear_WT_1_5N_LN_2_vk486$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_WT_1_5N_LN_2_vk486 <- add_row(full_linear_WT_1_5N_LN_2_vk486, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_WT_1_5N_LN_2_vk486$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_WT_1_5N_LN_2_vk486 <- add_row(full_linear_WT_1_5N_LN_2_vk486, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_WT_1_5N_LN_2_vk486 <- mutate(full_linear_WT_1_5N_LN_2_vk486, SAMPLE = "WT CD5- PtC-")
#
# RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5N_LN_2_vk486")==FALSE){
linear_RAG_1_5N_LN_2_vk486 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5N_LN_2_vk486 <- linear_RAG_1_5N_LN_2_vk486
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5N_LN_2_vk486$GENE)
if(str_detect(full_linear_RAG_1_5N_LN_2_vk486$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5N_LN_2_vk486 <- add_row(full_linear_RAG_1_5N_LN_2_vk486, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5N_LN_2_vk486$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5N_LN_2_vk486 <- add_row(full_linear_RAG_1_5N_LN_2_vk486, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5N_LN_2_vk486 <- mutate(full_linear_RAG_1_5N_LN_2_vk486, SAMPLE = "dnRAG1 CD5- PtC-")
#
# 5P LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LN_2_vk486")==FALSE){
linear_RAG_1_5P_LN_2_vk486 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LN_2_vk486 <- linear_RAG_1_5P_LN_2_vk486
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LN_2_vk486$GENE)
if(str_detect(full_linear_RAG_1_5P_LN_2_vk486$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LN_2_vk486 <- add_row(full_linear_RAG_1_5P_LN_2_vk486, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LN_2_vk486$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LN_2_vk486 <- add_row(full_linear_RAG_1_5P_LN_2_vk486, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LN_2_vk486 <- mutate(full_linear_RAG_1_5P_LN_2_vk486, SAMPLE = "dnRAG1 CD5+ PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LP_2_vk486")==FALSE){
linear_RAG_1_5P_LP_2_vk486 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LP_2_vk486 <- linear_RAG_1_5P_LP_2_vk486
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LP_2_vk486$GENE)
if(str_detect(full_linear_RAG_1_5P_LP_2_vk486$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LP_2_vk486 <- add_row(full_linear_RAG_1_5P_LP_2_vk486, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LP_2_vk486$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LP_2_vk486 <- add_row(full_linear_RAG_1_5P_LP_2_vk486, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LP_2_vk486 <- mutate(full_linear_RAG_1_5P_LP_2_vk486, SAMPLE = "dnRAG1 CD5+ PtC+")
#
# VH12_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5N_LN_2_vk486")==FALSE){
linear_VH12_1_5N_LN_2_vk486 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5N_LN_2_vk486 <- linear_VH12_1_5N_LN_2_vk486
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5N_LN_2_vk486$GENE)
if(str_detect(full_linear_VH12_1_5N_LN_2_vk486$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5N_LN_2_vk486 <- add_row(full_linear_VH12_1_5N_LN_2_vk486, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5N_LN_2_vk486$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5N_LN_2_vk486 <- add_row(full_linear_VH12_1_5N_LN_2_vk486, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5N_LN_2_vk486 <- mutate(full_linear_VH12_1_5N_LN_2_vk486, SAMPLE = "VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5P_LP_2_vk486")==FALSE){
linear_VH12_1_5P_LP_2_vk486 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5P_LP_2_vk486 <- linear_VH12_1_5P_LP_2_vk486
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5P_LP_2_vk486$GENE)
if(str_detect(full_linear_VH12_1_5P_LP_2_vk486$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5P_LP_2_vk486 <- add_row(full_linear_VH12_1_5P_LP_2_vk486, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5P_LP_2_vk486$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5P_LP_2_vk486 <- add_row(full_linear_VH12_1_5P_LP_2_vk486, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5P_LP_2_vk486 <- mutate(full_linear_VH12_1_5P_LP_2_vk486, SAMPLE = "VH12 CD5+ PtC+")
#
# VH12RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5N_LN_2_vk486")==FALSE){
linear_VH12RAG_1_5N_LN_2_vk486 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5N_LN_2_vk486 <- linear_VH12RAG_1_5N_LN_2_vk486
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5N_LN_2_vk486$GENE)
if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk486$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5N_LN_2_vk486 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk486, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk486$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5N_LN_2_vk486 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk486, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5N_LN_2_vk486 <- mutate(full_linear_VH12RAG_1_5N_LN_2_vk486, SAMPLE = "dnRAG1 VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5P_LP_2_vk486")==FALSE){
linear_VH12RAG_1_5P_LP_2_vk486 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5P_LP_2_vk486 <- linear_VH12RAG_1_5P_LP_2_vk486
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5P_LP_2_vk486$GENE)
if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk486$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5P_LP_2_vk486 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk486, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk486$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5P_LP_2_vk486 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk486, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5P_LP_2_vk486 <- mutate(full_linear_VH12RAG_1_5P_LP_2_vk486, SAMPLE = "dnRAG1 VH12 CD5+ PtC+")
#
# Vk 4-91
#
# WT_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_WT_1_5N_LN_2_vk491")==FALSE){
linear_WT_1_5N_LN_2_vk491 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_WT_1_5N_LN_2_vk491 <- linear_WT_1_5N_LN_2_vk491
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_WT_1_5N_LN_2_vk491$GENE)
if(str_detect(full_linear_WT_1_5N_LN_2_vk491$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_WT_1_5N_LN_2_vk491 <- add_row(full_linear_WT_1_5N_LN_2_vk491, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_WT_1_5N_LN_2_vk491$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_WT_1_5N_LN_2_vk491 <- add_row(full_linear_WT_1_5N_LN_2_vk491, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_WT_1_5N_LN_2_vk491 <- mutate(full_linear_WT_1_5N_LN_2_vk491, SAMPLE = "WT CD5- PtC-")
#
# RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5N_LN_2_vk491")==FALSE){
linear_RAG_1_5N_LN_2_vk491 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5N_LN_2_vk491 <- linear_RAG_1_5N_LN_2_vk491
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5N_LN_2_vk491$GENE)
if(str_detect(full_linear_RAG_1_5N_LN_2_vk491$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5N_LN_2_vk491 <- add_row(full_linear_RAG_1_5N_LN_2_vk491, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5N_LN_2_vk491$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5N_LN_2_vk491 <- add_row(full_linear_RAG_1_5N_LN_2_vk491, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5N_LN_2_vk491 <- mutate(full_linear_RAG_1_5N_LN_2_vk491, SAMPLE = "dnRAG1 CD5- PtC-")
#
# 5P LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LN_2_vk491")==FALSE){
linear_RAG_1_5P_LN_2_vk491 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LN_2_vk491 <- linear_RAG_1_5P_LN_2_vk491
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LN_2_vk491$GENE)
if(str_detect(full_linear_RAG_1_5P_LN_2_vk491$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LN_2_vk491 <- add_row(full_linear_RAG_1_5P_LN_2_vk491, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LN_2_vk491$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LN_2_vk491 <- add_row(full_linear_RAG_1_5P_LN_2_vk491, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LN_2_vk491 <- mutate(full_linear_RAG_1_5P_LN_2_vk491, SAMPLE = "dnRAG1 CD5+ PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LP_2_vk491")==FALSE){
linear_RAG_1_5P_LP_2_vk491 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LP_2_vk491 <- linear_RAG_1_5P_LP_2_vk491
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LP_2_vk491$GENE)
if(str_detect(full_linear_RAG_1_5P_LP_2_vk491$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LP_2_vk491 <- add_row(full_linear_RAG_1_5P_LP_2_vk491, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LP_2_vk491$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LP_2_vk491 <- add_row(full_linear_RAG_1_5P_LP_2_vk491, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LP_2_vk491 <- mutate(full_linear_RAG_1_5P_LP_2_vk491, SAMPLE = "dnRAG1 CD5+ PtC+")
#
# VH12_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5N_LN_2_vk491")==FALSE){
linear_VH12_1_5N_LN_2_vk491 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5N_LN_2_vk491 <- linear_VH12_1_5N_LN_2_vk491
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5N_LN_2_vk491$GENE)
if(str_detect(full_linear_VH12_1_5N_LN_2_vk491$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5N_LN_2_vk491 <- add_row(full_linear_VH12_1_5N_LN_2_vk491, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5N_LN_2_vk491$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5N_LN_2_vk491 <- add_row(full_linear_VH12_1_5N_LN_2_vk491, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5N_LN_2_vk491 <- mutate(full_linear_VH12_1_5N_LN_2_vk491, SAMPLE = "VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5P_LP_2_vk491")==FALSE){
linear_VH12_1_5P_LP_2_vk491 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5P_LP_2_vk491 <- linear_VH12_1_5P_LP_2_vk491
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5P_LP_2_vk491$GENE)
if(str_detect(full_linear_VH12_1_5P_LP_2_vk491$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5P_LP_2_vk491 <- add_row(full_linear_VH12_1_5P_LP_2_vk491, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5P_LP_2_vk491$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5P_LP_2_vk491 <- add_row(full_linear_VH12_1_5P_LP_2_vk491, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5P_LP_2_vk491 <- mutate(full_linear_VH12_1_5P_LP_2_vk491, SAMPLE = "VH12 CD5+ PtC+")
#
# VH12RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5N_LN_2_vk491")==FALSE){
linear_VH12RAG_1_5N_LN_2_vk491 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5N_LN_2_vk491 <- linear_VH12RAG_1_5N_LN_2_vk491
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5N_LN_2_vk491$GENE)
if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk491$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5N_LN_2_vk491 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk491, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk491$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5N_LN_2_vk491 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk491, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5N_LN_2_vk491 <- mutate(full_linear_VH12RAG_1_5N_LN_2_vk491, SAMPLE = "dnRAG1 VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5P_LP_2_vk491")==FALSE){
linear_VH12RAG_1_5P_LP_2_vk491 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5P_LP_2_vk491 <- linear_VH12RAG_1_5P_LP_2_vk491
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5P_LP_2_vk491$GENE)
if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk491$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5P_LP_2_vk491 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk491, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk491$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5P_LP_2_vk491 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk491, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5P_LP_2_vk491 <- mutate(full_linear_VH12RAG_1_5P_LP_2_vk491, SAMPLE = "dnRAG1 VH12 CD5+ PtC+")
#
# Vk 1-110
#
# WT_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_WT_1_5N_LN_2_vk1110")==FALSE){
linear_WT_1_5N_LN_2_vk1110 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_WT_1_5N_LN_2_vk1110 <- linear_WT_1_5N_LN_2_vk1110
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_WT_1_5N_LN_2_vk1110$GENE)
if(str_detect(full_linear_WT_1_5N_LN_2_vk1110$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_WT_1_5N_LN_2_vk1110 <- add_row(full_linear_WT_1_5N_LN_2_vk1110, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_WT_1_5N_LN_2_vk1110$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_WT_1_5N_LN_2_vk1110 <- add_row(full_linear_WT_1_5N_LN_2_vk1110, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_WT_1_5N_LN_2_vk1110 <- mutate(full_linear_WT_1_5N_LN_2_vk1110, SAMPLE = "WT CD5- PtC-")
#
# RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5N_LN_2_vk1110")==FALSE){
linear_RAG_1_5N_LN_2_vk1110 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5N_LN_2_vk1110 <- linear_RAG_1_5N_LN_2_vk1110
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5N_LN_2_vk1110$GENE)
if(str_detect(full_linear_RAG_1_5N_LN_2_vk1110$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5N_LN_2_vk1110 <- add_row(full_linear_RAG_1_5N_LN_2_vk1110, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5N_LN_2_vk1110$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5N_LN_2_vk1110 <- add_row(full_linear_RAG_1_5N_LN_2_vk1110, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5N_LN_2_vk1110 <- mutate(full_linear_RAG_1_5N_LN_2_vk1110, SAMPLE = "dnRAG1 CD5- PtC-")
#
# 5P LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LN_2_vk1110")==FALSE){
linear_RAG_1_5P_LN_2_vk1110 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LN_2_vk1110 <- linear_RAG_1_5P_LN_2_vk1110
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LN_2_vk1110$GENE)
if(str_detect(full_linear_RAG_1_5P_LN_2_vk1110$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LN_2_vk1110 <- add_row(full_linear_RAG_1_5P_LN_2_vk1110, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LN_2_vk1110$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LN_2_vk1110 <- add_row(full_linear_RAG_1_5P_LN_2_vk1110, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LN_2_vk1110 <- mutate(full_linear_RAG_1_5P_LN_2_vk1110, SAMPLE = "dnRAG1 CD5+ PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LP_2_vk1110")==FALSE){
linear_RAG_1_5P_LP_2_vk1110 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LP_2_vk1110 <- linear_RAG_1_5P_LP_2_vk1110
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LP_2_vk1110$GENE)
if(str_detect(full_linear_RAG_1_5P_LP_2_vk1110$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LP_2_vk1110 <- add_row(full_linear_RAG_1_5P_LP_2_vk1110, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LP_2_vk1110$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LP_2_vk1110 <- add_row(full_linear_RAG_1_5P_LP_2_vk1110, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LP_2_vk1110 <- mutate(full_linear_RAG_1_5P_LP_2_vk1110, SAMPLE = "dnRAG1 CD5+ PtC+")
#
# VH12_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5N_LN_2_vk1110")==FALSE){
linear_VH12_1_5N_LN_2_vk1110 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5N_LN_2_vk1110 <- linear_VH12_1_5N_LN_2_vk1110
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5N_LN_2_vk1110$GENE)
if(str_detect(full_linear_VH12_1_5N_LN_2_vk1110$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5N_LN_2_vk1110 <- add_row(full_linear_VH12_1_5N_LN_2_vk1110, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5N_LN_2_vk1110$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5N_LN_2_vk1110 <- add_row(full_linear_VH12_1_5N_LN_2_vk1110, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5N_LN_2_vk1110 <- mutate(full_linear_VH12_1_5N_LN_2_vk1110, SAMPLE = "VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5P_LP_2_vk1110")==FALSE){
linear_VH12_1_5P_LP_2_vk1110 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5P_LP_2_vk1110 <- linear_VH12_1_5P_LP_2_vk1110
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5P_LP_2_vk1110$GENE)
if(str_detect(full_linear_VH12_1_5P_LP_2_vk1110$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5P_LP_2_vk1110 <- add_row(full_linear_VH12_1_5P_LP_2_vk1110, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5P_LP_2_vk1110$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5P_LP_2_vk1110 <- add_row(full_linear_VH12_1_5P_LP_2_vk1110, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5P_LP_2_vk1110 <- mutate(full_linear_VH12_1_5P_LP_2_vk1110, SAMPLE = "VH12 CD5+ PtC+")
#
# VH12RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5N_LN_2_vk1110")==FALSE){
linear_VH12RAG_1_5N_LN_2_vk1110 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5N_LN_2_vk1110 <- linear_VH12RAG_1_5N_LN_2_vk1110
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5N_LN_2_vk1110$GENE)
if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk1110$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5N_LN_2_vk1110 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk1110, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk1110$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5N_LN_2_vk1110 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk1110, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5N_LN_2_vk1110 <- mutate(full_linear_VH12RAG_1_5N_LN_2_vk1110, SAMPLE = "dnRAG1 VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5P_LP_2_vk1110")==FALSE){
linear_VH12RAG_1_5P_LP_2_vk1110 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5P_LP_2_vk1110 <- linear_VH12RAG_1_5P_LP_2_vk1110
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5P_LP_2_vk1110$GENE)
if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk1110$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5P_LP_2_vk1110 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk1110, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk1110$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5P_LP_2_vk1110 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk1110, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5P_LP_2_vk1110 <- mutate(full_linear_VH12RAG_1_5P_LP_2_vk1110, SAMPLE = "dnRAG1 VH12 CD5+ PtC+")
#
# Vk 14-126
#
# WT_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_WT_1_5N_LN_2_vk14126")==FALSE){
linear_WT_1_5N_LN_2_vk14126 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_WT_1_5N_LN_2_vk14126 <- linear_WT_1_5N_LN_2_vk14126
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_WT_1_5N_LN_2_vk14126$GENE)
if(str_detect(full_linear_WT_1_5N_LN_2_vk14126$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_WT_1_5N_LN_2_vk14126 <- add_row(full_linear_WT_1_5N_LN_2_vk14126, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_WT_1_5N_LN_2_vk14126$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_WT_1_5N_LN_2_vk14126 <- add_row(full_linear_WT_1_5N_LN_2_vk14126, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_WT_1_5N_LN_2_vk14126 <- mutate(full_linear_WT_1_5N_LN_2_vk14126, SAMPLE = "WT CD5- PtC-")
#
# RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5N_LN_2_vk14126")==FALSE){
linear_RAG_1_5N_LN_2_vk14126 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5N_LN_2_vk14126 <- linear_RAG_1_5N_LN_2_vk14126
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5N_LN_2_vk14126$GENE)
if(str_detect(full_linear_RAG_1_5N_LN_2_vk14126$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5N_LN_2_vk14126 <- add_row(full_linear_RAG_1_5N_LN_2_vk14126, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5N_LN_2_vk14126$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5N_LN_2_vk14126 <- add_row(full_linear_RAG_1_5N_LN_2_vk14126, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5N_LN_2_vk14126 <- mutate(full_linear_RAG_1_5N_LN_2_vk14126, SAMPLE = "dnRAG1 CD5- PtC-")
#
# 5P LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LN_2_vk14126")==FALSE){
linear_RAG_1_5P_LN_2_vk14126 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LN_2_vk14126 <- linear_RAG_1_5P_LN_2_vk14126
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LN_2_vk14126$GENE)
if(str_detect(full_linear_RAG_1_5P_LN_2_vk14126$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LN_2_vk14126 <- add_row(full_linear_RAG_1_5P_LN_2_vk14126, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LN_2_vk14126$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LN_2_vk14126 <- add_row(full_linear_RAG_1_5P_LN_2_vk14126, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LN_2_vk14126 <- mutate(full_linear_RAG_1_5P_LN_2_vk14126, SAMPLE = "dnRAG1 CD5+ PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_RAG_1_5P_LP_2_vk14126")==FALSE){
linear_RAG_1_5P_LP_2_vk14126 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_RAG_1_5P_LP_2_vk14126 <- linear_RAG_1_5P_LP_2_vk14126
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_RAG_1_5P_LP_2_vk14126$GENE)
if(str_detect(full_linear_RAG_1_5P_LP_2_vk14126$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_RAG_1_5P_LP_2_vk14126 <- add_row(full_linear_RAG_1_5P_LP_2_vk14126, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_RAG_1_5P_LP_2_vk14126$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_RAG_1_5P_LP_2_vk14126 <- add_row(full_linear_RAG_1_5P_LP_2_vk14126, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_RAG_1_5P_LP_2_vk14126 <- mutate(full_linear_RAG_1_5P_LP_2_vk14126, SAMPLE = "dnRAG1 CD5+ PtC+")
#
# VH12_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5N_LN_2_vk14126")==FALSE){
linear_VH12_1_5N_LN_2_vk14126 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5N_LN_2_vk14126 <- linear_VH12_1_5N_LN_2_vk14126
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5N_LN_2_vk14126$GENE)
if(str_detect(full_linear_VH12_1_5N_LN_2_vk14126$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5N_LN_2_vk14126 <- add_row(full_linear_VH12_1_5N_LN_2_vk14126, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5N_LN_2_vk14126$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5N_LN_2_vk14126 <- add_row(full_linear_VH12_1_5N_LN_2_vk14126, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5N_LN_2_vk14126 <- mutate(full_linear_VH12_1_5N_LN_2_vk14126, SAMPLE = "VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12_1_5P_LP_2_vk14126")==FALSE){
linear_VH12_1_5P_LP_2_vk14126 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12_1_5P_LP_2_vk14126 <- linear_VH12_1_5P_LP_2_vk14126
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12_1_5P_LP_2_vk14126$GENE)
if(str_detect(full_linear_VH12_1_5P_LP_2_vk14126$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12_1_5P_LP_2_vk14126 <- add_row(full_linear_VH12_1_5P_LP_2_vk14126, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12_1_5P_LP_2_vk14126$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12_1_5P_LP_2_vk14126 <- add_row(full_linear_VH12_1_5P_LP_2_vk14126, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12_1_5P_LP_2_vk14126 <- mutate(full_linear_VH12_1_5P_LP_2_vk14126, SAMPLE = "VH12 CD5+ PtC+")
#
# VH12RAG_1
#
# 5N LN
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5N_LN_2_vk14126")==FALSE){
linear_VH12RAG_1_5N_LN_2_vk14126 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5N_LN_2_vk14126 <- linear_VH12RAG_1_5N_LN_2_vk14126
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5N_LN_2_vk14126$GENE)
if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk14126$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5N_LN_2_vk14126 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk14126, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5N_LN_2_vk14126$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5N_LN_2_vk14126 <- add_row(full_linear_VH12RAG_1_5N_LN_2_vk14126, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5N_LN_2_vk14126 <- mutate(full_linear_VH12RAG_1_5N_LN_2_vk14126, SAMPLE = "dnRAG1 VH12 CD5- PtC-")
#
# 5P LP
#
# Ensure that a data frame exists for the pulled gene sequences from each replicate
# If a data frame doesn't exist this creates a place holder data frame with sequence counts and frequencies set to 0
# This place holder data frame prevents future erros from arising due to missing data
#
if(exists("linear_VH12RAG_1_5P_LP_2_vk14126")==FALSE){
linear_VH12RAG_1_5P_LP_2_vk14126 <- data.frame(GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0)
}
#
# Create a secondary data frame to work with so the original frame is maintained for reference
#
full_linear_VH12RAG_1_5P_LP_2_vk14126 <- linear_VH12RAG_1_5P_LP_2_vk14126
#
# Compare the last entry of the list of J gene calls to that of the functional J genes (plus pertinent psuedogenes) in the light chain loci
# If the entries are not identical, add the most proximal J gene to the data table with count and frequency = 0
#
a <- length(full_linear_VH12RAG_1_5P_LP_2_vk14126$GENE)
if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk14126$GENE[[a]], J_GENES[[7]]) == FALSE) {
  full_linear_VH12RAG_1_5P_LP_2_vk14126 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk14126, GENE=J_GENES[[7]], SEQ_COUNT=0, SEQ_FREQ=0, .after=a)
}
#
# Go through the functional repertoire of J genes and ensure that each gene is represented in the data frame
#
b <- length(J_GENES)
x <- c(1:b)
for (val in x) {
  if(str_detect(full_linear_VH12RAG_1_5P_LP_2_vk14126$GENE[[val]], J_GENES[[val]]) == FALSE) {
    full_linear_VH12RAG_1_5P_LP_2_vk14126 <- add_row(full_linear_VH12RAG_1_5P_LP_2_vk14126, GENE=J_GENES[[val]], SEQ_COUNT=0, SEQ_FREQ=0, .before=val)
  }
}
#
# Add the sample type to the data frame for grouping purposes
#
full_linear_VH12RAG_1_5P_LP_2_vk14126 <- mutate(full_linear_VH12RAG_1_5P_LP_2_vk14126, SAMPLE = "dnRAG1 VH12 CD5+ PtC+")
#
# Vk 3-7
#
# WT
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
WT_5N_LN_2_vk37_stat <- data.frame( SEQ_FREQ_1 = full_linear_WT_1_5N_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_WT_2_5N_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_WT_3_5N_LN_2_vk37$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
WT_5N_LN_2_vk37 <- mutate(WT_5N_LN_2_vk37_stat, MEAN_SEQ_FREQ = apply(WT_5N_LN_2_vk37_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
WT_5N_LN_2_vk37 <- mutate(WT_5N_LN_2_vk37, SEM = apply(WT_5N_LN_2_vk37_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
WT_5N_LN_2_vk37 <- mutate(WT_5N_LN_2_vk37, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
WT_5N_LN_2_vk37 <- mutate(WT_5N_LN_2_vk37, SAMPLE = full_linear_WT_1_5N_LN_2_vk37$SAMPLE[1:4])
#
#
# RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5N_LN_2_vk37_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5N_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5N_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5N_LN_2_vk37$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5N_LN_2_vk37 <- mutate(RAG_5N_LN_2_vk37_stat, MEAN_SEQ_FREQ = apply(RAG_5N_LN_2_vk37_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5N_LN_2_vk37 <- mutate(RAG_5N_LN_2_vk37, SEM = apply(RAG_5N_LN_2_vk37_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5N_LN_2_vk37 <- mutate(RAG_5N_LN_2_vk37, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5N_LN_2_vk37 <- mutate(RAG_5N_LN_2_vk37, SAMPLE = full_linear_RAG_1_5N_LN_2_vk37$SAMPLE[1:4])
#
# 5P_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LN_2_vk37_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LN_2_vk37$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LN_2_vk37 <- mutate(RAG_5P_LN_2_vk37_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LN_2_vk37_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LN_2_vk37 <- mutate(RAG_5P_LN_2_vk37, SEM = apply(RAG_5P_LN_2_vk37_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LN_2_vk37 <- mutate(RAG_5P_LN_2_vk37, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LN_2_vk37 <- mutate(RAG_5P_LN_2_vk37, SAMPLE = full_linear_RAG_1_5P_LN_2_vk37$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LP_2_vk37_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LP_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LP_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LP_2_vk37$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LP_2_vk37 <- mutate(RAG_5P_LP_2_vk37_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LP_2_vk37_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LP_2_vk37 <- mutate(RAG_5P_LP_2_vk37, SEM = apply(RAG_5P_LP_2_vk37_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LP_2_vk37 <- mutate(RAG_5P_LP_2_vk37, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LP_2_vk37 <- mutate(RAG_5P_LP_2_vk37, SAMPLE = full_linear_RAG_1_5P_LP_2_vk37$SAMPLE[1:4])
#
#
# VH12
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5N_LN_2_vk37_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5N_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5N_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5N_LN_2_vk37$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5N_LN_2_vk37 <- mutate(VH12_5N_LN_2_vk37_stat, MEAN_SEQ_FREQ = apply(VH12_5N_LN_2_vk37_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5N_LN_2_vk37 <- mutate(VH12_5N_LN_2_vk37, SEM = apply(VH12_5N_LN_2_vk37_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5N_LN_2_vk37 <- mutate(VH12_5N_LN_2_vk37, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5N_LN_2_vk37 <- mutate(VH12_5N_LN_2_vk37, SAMPLE = full_linear_VH12_1_5N_LN_2_vk37$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5P_LP_2_vk37_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5P_LP_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5P_LP_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5P_LP_2_vk37$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5P_LP_2_vk37 <- mutate(VH12_5P_LP_2_vk37_stat, MEAN_SEQ_FREQ = apply(VH12_5P_LP_2_vk37_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5P_LP_2_vk37 <- mutate(VH12_5P_LP_2_vk37, SEM = apply(VH12_5P_LP_2_vk37_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5P_LP_2_vk37 <- mutate(VH12_5P_LP_2_vk37, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5P_LP_2_vk37 <- mutate(VH12_5P_LP_2_vk37, SAMPLE = full_linear_VH12_1_5P_LP_2_vk37$SAMPLE[1:4])
#
#
# VH12 RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5N_LN_2_vk37_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5N_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5N_LN_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5N_LN_2_vk37$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5N_LN_2_vk37 <- mutate(VH12_RAG_5N_LN_2_vk37_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5N_LN_2_vk37_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5N_LN_2_vk37 <- mutate(VH12_RAG_5N_LN_2_vk37, SEM = apply(VH12_RAG_5N_LN_2_vk37_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5N_LN_2_vk37 <- mutate(VH12_RAG_5N_LN_2_vk37, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5N_LN_2_vk37 <- mutate(VH12_RAG_5N_LN_2_vk37, SAMPLE = full_linear_VH12RAG_1_5N_LN_2_vk37$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5P_LP_2_vk37_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5P_LP_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5P_LP_2_vk37$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5P_LP_2_vk37$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5P_LP_2_vk37 <- mutate(VH12_RAG_5P_LP_2_vk37_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5P_LP_2_vk37_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5P_LP_2_vk37 <- mutate(VH12_RAG_5P_LP_2_vk37, SEM = apply(VH12_RAG_5P_LP_2_vk37_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5P_LP_2_vk37 <- mutate(VH12_RAG_5P_LP_2_vk37, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5P_LP_2_vk37 <- mutate(VH12_RAG_5P_LP_2_vk37, SAMPLE = full_linear_VH12RAG_1_5P_LP_2_vk37$SAMPLE[1:4])
#
# Vk 4-86
#
# WT
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
WT_5N_LN_2_vk486_stat <- data.frame( SEQ_FREQ_1 = full_linear_WT_1_5N_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_WT_2_5N_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_WT_3_5N_LN_2_vk486$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
WT_5N_LN_2_vk486 <- mutate(WT_5N_LN_2_vk486_stat, MEAN_SEQ_FREQ = apply(WT_5N_LN_2_vk486_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
WT_5N_LN_2_vk486 <- mutate(WT_5N_LN_2_vk486, SEM = apply(WT_5N_LN_2_vk486_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
WT_5N_LN_2_vk486 <- mutate(WT_5N_LN_2_vk486, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
WT_5N_LN_2_vk486 <- mutate(WT_5N_LN_2_vk486, SAMPLE = full_linear_WT_1_5N_LN_2_vk486$SAMPLE[1:4])
#
#
# RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5N_LN_2_vk486_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5N_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5N_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5N_LN_2_vk486$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5N_LN_2_vk486 <- mutate(RAG_5N_LN_2_vk486_stat, MEAN_SEQ_FREQ = apply(RAG_5N_LN_2_vk486_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5N_LN_2_vk486 <- mutate(RAG_5N_LN_2_vk486, SEM = apply(RAG_5N_LN_2_vk486_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5N_LN_2_vk486 <- mutate(RAG_5N_LN_2_vk486, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5N_LN_2_vk486 <- mutate(RAG_5N_LN_2_vk486, SAMPLE = full_linear_RAG_1_5N_LN_2_vk486$SAMPLE[1:4])
#
# 5P_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LN_2_vk486_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LN_2_vk486$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LN_2_vk486 <- mutate(RAG_5P_LN_2_vk486_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LN_2_vk486_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LN_2_vk486 <- mutate(RAG_5P_LN_2_vk486, SEM = apply(RAG_5P_LN_2_vk486_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LN_2_vk486 <- mutate(RAG_5P_LN_2_vk486, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LN_2_vk486 <- mutate(RAG_5P_LN_2_vk486, SAMPLE = full_linear_RAG_1_5P_LN_2_vk486$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LP_2_vk486_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LP_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LP_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LP_2_vk486$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LP_2_vk486 <- mutate(RAG_5P_LP_2_vk486_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LP_2_vk486_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LP_2_vk486 <- mutate(RAG_5P_LP_2_vk486, SEM = apply(RAG_5P_LP_2_vk486_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LP_2_vk486 <- mutate(RAG_5P_LP_2_vk486, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LP_2_vk486 <- mutate(RAG_5P_LP_2_vk486, SAMPLE = full_linear_RAG_1_5P_LP_2_vk486$SAMPLE[1:4])
#
#
# VH12
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5N_LN_2_vk486_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5N_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5N_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5N_LN_2_vk486$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5N_LN_2_vk486 <- mutate(VH12_5N_LN_2_vk486_stat, MEAN_SEQ_FREQ = apply(VH12_5N_LN_2_vk486_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5N_LN_2_vk486 <- mutate(VH12_5N_LN_2_vk486, SEM = apply(VH12_5N_LN_2_vk486_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5N_LN_2_vk486 <- mutate(VH12_5N_LN_2_vk486, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5N_LN_2_vk486 <- mutate(VH12_5N_LN_2_vk486, SAMPLE = full_linear_VH12_1_5N_LN_2_vk486$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5P_LP_2_vk486_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5P_LP_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5P_LP_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5P_LP_2_vk486$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5P_LP_2_vk486 <- mutate(VH12_5P_LP_2_vk486_stat, MEAN_SEQ_FREQ = apply(VH12_5P_LP_2_vk486_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5P_LP_2_vk486 <- mutate(VH12_5P_LP_2_vk486, SEM = apply(VH12_5P_LP_2_vk486_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5P_LP_2_vk486 <- mutate(VH12_5P_LP_2_vk486, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5P_LP_2_vk486 <- mutate(VH12_5P_LP_2_vk486, SAMPLE = full_linear_VH12_1_5P_LP_2_vk486$SAMPLE[1:4])
#
#
# VH12 RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5N_LN_2_vk486_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5N_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5N_LN_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5N_LN_2_vk486$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5N_LN_2_vk486 <- mutate(VH12_RAG_5N_LN_2_vk486_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5N_LN_2_vk486_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5N_LN_2_vk486 <- mutate(VH12_RAG_5N_LN_2_vk486, SEM = apply(VH12_RAG_5N_LN_2_vk486_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5N_LN_2_vk486 <- mutate(VH12_RAG_5N_LN_2_vk486, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5N_LN_2_vk486 <- mutate(VH12_RAG_5N_LN_2_vk486, SAMPLE = full_linear_VH12RAG_1_5N_LN_2_vk486$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5P_LP_2_vk486_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5P_LP_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5P_LP_2_vk486$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5P_LP_2_vk486$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5P_LP_2_vk486 <- mutate(VH12_RAG_5P_LP_2_vk486_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5P_LP_2_vk486_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5P_LP_2_vk486 <- mutate(VH12_RAG_5P_LP_2_vk486, SEM = apply(VH12_RAG_5P_LP_2_vk486_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5P_LP_2_vk486 <- mutate(VH12_RAG_5P_LP_2_vk486, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5P_LP_2_vk486 <- mutate(VH12_RAG_5P_LP_2_vk486, SAMPLE = full_linear_VH12RAG_1_5P_LP_2_vk486$SAMPLE[1:4])
#
# Vk 4-91
#
# WT
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
WT_5N_LN_2_vk491_stat <- data.frame( SEQ_FREQ_1 = full_linear_WT_1_5N_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_WT_2_5N_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_WT_3_5N_LN_2_vk491$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
WT_5N_LN_2_vk491 <- mutate(WT_5N_LN_2_vk491_stat, MEAN_SEQ_FREQ = apply(WT_5N_LN_2_vk491_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
WT_5N_LN_2_vk491 <- mutate(WT_5N_LN_2_vk491, SEM = apply(WT_5N_LN_2_vk491_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
WT_5N_LN_2_vk491 <- mutate(WT_5N_LN_2_vk491, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
WT_5N_LN_2_vk491 <- mutate(WT_5N_LN_2_vk491, SAMPLE = full_linear_WT_1_5N_LN_2_vk491$SAMPLE[1:4])
#
#
# RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5N_LN_2_vk491_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5N_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5N_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5N_LN_2_vk491$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5N_LN_2_vk491 <- mutate(RAG_5N_LN_2_vk491_stat, MEAN_SEQ_FREQ = apply(RAG_5N_LN_2_vk491_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5N_LN_2_vk491 <- mutate(RAG_5N_LN_2_vk491, SEM = apply(RAG_5N_LN_2_vk491_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5N_LN_2_vk491 <- mutate(RAG_5N_LN_2_vk491, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5N_LN_2_vk491 <- mutate(RAG_5N_LN_2_vk491, SAMPLE = full_linear_RAG_1_5N_LN_2_vk491$SAMPLE[1:4])
#
# 5P_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LN_2_vk491_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LN_2_vk491$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LN_2_vk491 <- mutate(RAG_5P_LN_2_vk491_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LN_2_vk491_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LN_2_vk491 <- mutate(RAG_5P_LN_2_vk491, SEM = apply(RAG_5P_LN_2_vk491_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LN_2_vk491 <- mutate(RAG_5P_LN_2_vk491, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LN_2_vk491 <- mutate(RAG_5P_LN_2_vk491, SAMPLE = full_linear_RAG_1_5P_LN_2_vk491$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LP_2_vk491_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LP_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LP_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LP_2_vk491$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LP_2_vk491 <- mutate(RAG_5P_LP_2_vk491_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LP_2_vk491_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LP_2_vk491 <- mutate(RAG_5P_LP_2_vk491, SEM = apply(RAG_5P_LP_2_vk491_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LP_2_vk491 <- mutate(RAG_5P_LP_2_vk491, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LP_2_vk491 <- mutate(RAG_5P_LP_2_vk491, SAMPLE = full_linear_RAG_1_5P_LP_2_vk491$SAMPLE[1:4])
#
#
# VH12
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5N_LN_2_vk491_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5N_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5N_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5N_LN_2_vk491$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5N_LN_2_vk491 <- mutate(VH12_5N_LN_2_vk491_stat, MEAN_SEQ_FREQ = apply(VH12_5N_LN_2_vk491_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5N_LN_2_vk491 <- mutate(VH12_5N_LN_2_vk491, SEM = apply(VH12_5N_LN_2_vk491_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5N_LN_2_vk491 <- mutate(VH12_5N_LN_2_vk491, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5N_LN_2_vk491 <- mutate(VH12_5N_LN_2_vk491, SAMPLE = full_linear_VH12_1_5N_LN_2_vk491$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5P_LP_2_vk491_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5P_LP_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5P_LP_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5P_LP_2_vk491$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5P_LP_2_vk491 <- mutate(VH12_5P_LP_2_vk491_stat, MEAN_SEQ_FREQ = apply(VH12_5P_LP_2_vk491_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5P_LP_2_vk491 <- mutate(VH12_5P_LP_2_vk491, SEM = apply(VH12_5P_LP_2_vk491_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5P_LP_2_vk491 <- mutate(VH12_5P_LP_2_vk491, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5P_LP_2_vk491 <- mutate(VH12_5P_LP_2_vk491, SAMPLE = full_linear_VH12_1_5P_LP_2_vk491$SAMPLE[1:4])
#
#
# VH12 RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5N_LN_2_vk491_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5N_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5N_LN_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5N_LN_2_vk491$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5N_LN_2_vk491 <- mutate(VH12_RAG_5N_LN_2_vk491_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5N_LN_2_vk491_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5N_LN_2_vk491 <- mutate(VH12_RAG_5N_LN_2_vk491, SEM = apply(VH12_RAG_5N_LN_2_vk491_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5N_LN_2_vk491 <- mutate(VH12_RAG_5N_LN_2_vk491, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5N_LN_2_vk491 <- mutate(VH12_RAG_5N_LN_2_vk491, SAMPLE = full_linear_VH12RAG_1_5N_LN_2_vk491$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5P_LP_2_vk491_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5P_LP_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5P_LP_2_vk491$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5P_LP_2_vk491$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5P_LP_2_vk491 <- mutate(VH12_RAG_5P_LP_2_vk491_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5P_LP_2_vk491_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5P_LP_2_vk491 <- mutate(VH12_RAG_5P_LP_2_vk491, SEM = apply(VH12_RAG_5P_LP_2_vk491_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5P_LP_2_vk491 <- mutate(VH12_RAG_5P_LP_2_vk491, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5P_LP_2_vk491 <- mutate(VH12_RAG_5P_LP_2_vk491, SAMPLE = full_linear_VH12RAG_1_5P_LP_2_vk491$SAMPLE[1:4])
#
# Vk 1-110
#
# WT
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
WT_5N_LN_2_vk1110_stat <- data.frame( SEQ_FREQ_1 = full_linear_WT_1_5N_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_WT_2_5N_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_WT_3_5N_LN_2_vk1110$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
WT_5N_LN_2_vk1110 <- mutate(WT_5N_LN_2_vk1110_stat, MEAN_SEQ_FREQ = apply(WT_5N_LN_2_vk1110_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
WT_5N_LN_2_vk1110 <- mutate(WT_5N_LN_2_vk1110, SEM = apply(WT_5N_LN_2_vk1110_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
WT_5N_LN_2_vk1110 <- mutate(WT_5N_LN_2_vk1110, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
WT_5N_LN_2_vk1110 <- mutate(WT_5N_LN_2_vk1110, SAMPLE = full_linear_WT_1_5N_LN_2_vk1110$SAMPLE[1:4])
#
#
# RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5N_LN_2_vk1110_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5N_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5N_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5N_LN_2_vk1110$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5N_LN_2_vk1110 <- mutate(RAG_5N_LN_2_vk1110_stat, MEAN_SEQ_FREQ = apply(RAG_5N_LN_2_vk1110_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5N_LN_2_vk1110 <- mutate(RAG_5N_LN_2_vk1110, SEM = apply(RAG_5N_LN_2_vk1110_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5N_LN_2_vk1110 <- mutate(RAG_5N_LN_2_vk1110, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5N_LN_2_vk1110 <- mutate(RAG_5N_LN_2_vk1110, SAMPLE = full_linear_RAG_1_5N_LN_2_vk1110$SAMPLE[1:4])
#
# 5P_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LN_2_vk1110_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LN_2_vk1110$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LN_2_vk1110 <- mutate(RAG_5P_LN_2_vk1110_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LN_2_vk1110_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LN_2_vk1110 <- mutate(RAG_5P_LN_2_vk1110, SEM = apply(RAG_5P_LN_2_vk1110_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LN_2_vk1110 <- mutate(RAG_5P_LN_2_vk1110, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LN_2_vk1110 <- mutate(RAG_5P_LN_2_vk1110, SAMPLE = full_linear_RAG_1_5P_LN_2_vk1110$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LP_2_vk1110_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LP_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LP_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LP_2_vk1110$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LP_2_vk1110 <- mutate(RAG_5P_LP_2_vk1110_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LP_2_vk1110_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LP_2_vk1110 <- mutate(RAG_5P_LP_2_vk1110, SEM = apply(RAG_5P_LP_2_vk1110_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LP_2_vk1110 <- mutate(RAG_5P_LP_2_vk1110, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LP_2_vk1110 <- mutate(RAG_5P_LP_2_vk1110, SAMPLE = full_linear_RAG_1_5P_LP_2_vk1110$SAMPLE[1:4])
#
#
# VH12
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5N_LN_2_vk1110_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5N_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5N_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5N_LN_2_vk1110$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5N_LN_2_vk1110 <- mutate(VH12_5N_LN_2_vk1110_stat, MEAN_SEQ_FREQ = apply(VH12_5N_LN_2_vk1110_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5N_LN_2_vk1110 <- mutate(VH12_5N_LN_2_vk1110, SEM = apply(VH12_5N_LN_2_vk1110_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5N_LN_2_vk1110 <- mutate(VH12_5N_LN_2_vk1110, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5N_LN_2_vk1110 <- mutate(VH12_5N_LN_2_vk1110, SAMPLE = full_linear_VH12_1_5N_LN_2_vk1110$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5P_LP_2_vk1110_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5P_LP_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5P_LP_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5P_LP_2_vk1110$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5P_LP_2_vk1110 <- mutate(VH12_5P_LP_2_vk1110_stat, MEAN_SEQ_FREQ = apply(VH12_5P_LP_2_vk1110_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5P_LP_2_vk1110 <- mutate(VH12_5P_LP_2_vk1110, SEM = apply(VH12_5P_LP_2_vk1110_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5P_LP_2_vk1110 <- mutate(VH12_5P_LP_2_vk1110, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5P_LP_2_vk1110 <- mutate(VH12_5P_LP_2_vk1110, SAMPLE = full_linear_VH12_1_5P_LP_2_vk1110$SAMPLE[1:4])
#
#
# VH12 RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5N_LN_2_vk1110_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5N_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5N_LN_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5N_LN_2_vk1110$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5N_LN_2_vk1110 <- mutate(VH12_RAG_5N_LN_2_vk1110_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5N_LN_2_vk1110_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5N_LN_2_vk1110 <- mutate(VH12_RAG_5N_LN_2_vk1110, SEM = apply(VH12_RAG_5N_LN_2_vk1110_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5N_LN_2_vk1110 <- mutate(VH12_RAG_5N_LN_2_vk1110, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5N_LN_2_vk1110 <- mutate(VH12_RAG_5N_LN_2_vk1110, SAMPLE = full_linear_VH12RAG_1_5N_LN_2_vk1110$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5P_LP_2_vk1110_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5P_LP_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5P_LP_2_vk1110$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5P_LP_2_vk1110$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5P_LP_2_vk1110 <- mutate(VH12_RAG_5P_LP_2_vk1110_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5P_LP_2_vk1110_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5P_LP_2_vk1110 <- mutate(VH12_RAG_5P_LP_2_vk1110, SEM = apply(VH12_RAG_5P_LP_2_vk1110_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5P_LP_2_vk1110 <- mutate(VH12_RAG_5P_LP_2_vk1110, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5P_LP_2_vk1110 <- mutate(VH12_RAG_5P_LP_2_vk1110, SAMPLE = full_linear_VH12RAG_1_5P_LP_2_vk1110$SAMPLE[1:4])
#
# Vk 14-126
#
# WT
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
WT_5N_LN_2_vk14126_stat <- data.frame( SEQ_FREQ_1 = full_linear_WT_1_5N_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_WT_2_5N_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_WT_3_5N_LN_2_vk14126$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
WT_5N_LN_2_vk14126 <- mutate(WT_5N_LN_2_vk14126_stat, MEAN_SEQ_FREQ = apply(WT_5N_LN_2_vk14126_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
WT_5N_LN_2_vk14126 <- mutate(WT_5N_LN_2_vk14126, SEM = apply(WT_5N_LN_2_vk14126_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
WT_5N_LN_2_vk14126 <- mutate(WT_5N_LN_2_vk14126, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
WT_5N_LN_2_vk14126 <- mutate(WT_5N_LN_2_vk14126, SAMPLE = full_linear_WT_1_5N_LN_2_vk14126$SAMPLE[1:4])
#
#
# RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5N_LN_2_vk14126_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5N_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5N_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5N_LN_2_vk14126$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5N_LN_2_vk14126 <- mutate(RAG_5N_LN_2_vk14126_stat, MEAN_SEQ_FREQ = apply(RAG_5N_LN_2_vk14126_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5N_LN_2_vk14126 <- mutate(RAG_5N_LN_2_vk14126, SEM = apply(RAG_5N_LN_2_vk14126_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5N_LN_2_vk14126 <- mutate(RAG_5N_LN_2_vk14126, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5N_LN_2_vk14126 <- mutate(RAG_5N_LN_2_vk14126, SAMPLE = full_linear_RAG_1_5N_LN_2_vk14126$SAMPLE[1:4])
#
# 5P_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LN_2_vk14126_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LN_2_vk14126$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LN_2_vk14126 <- mutate(RAG_5P_LN_2_vk14126_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LN_2_vk14126_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LN_2_vk14126 <- mutate(RAG_5P_LN_2_vk14126, SEM = apply(RAG_5P_LN_2_vk14126_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LN_2_vk14126 <- mutate(RAG_5P_LN_2_vk14126, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LN_2_vk14126 <- mutate(RAG_5P_LN_2_vk14126, SAMPLE = full_linear_RAG_1_5P_LN_2_vk14126$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
RAG_5P_LP_2_vk14126_stat <- data.frame( SEQ_FREQ_1 = full_linear_RAG_1_5P_LP_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_RAG_2_5P_LP_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_RAG_3_5P_LP_2_vk14126$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
RAG_5P_LP_2_vk14126 <- mutate(RAG_5P_LP_2_vk14126_stat, MEAN_SEQ_FREQ = apply(RAG_5P_LP_2_vk14126_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
RAG_5P_LP_2_vk14126 <- mutate(RAG_5P_LP_2_vk14126, SEM = apply(RAG_5P_LP_2_vk14126_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
RAG_5P_LP_2_vk14126 <- mutate(RAG_5P_LP_2_vk14126, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
RAG_5P_LP_2_vk14126 <- mutate(RAG_5P_LP_2_vk14126, SAMPLE = full_linear_RAG_1_5P_LP_2_vk14126$SAMPLE[1:4])
#
#
# VH12
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5N_LN_2_vk14126_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5N_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5N_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5N_LN_2_vk14126$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5N_LN_2_vk14126 <- mutate(VH12_5N_LN_2_vk14126_stat, MEAN_SEQ_FREQ = apply(VH12_5N_LN_2_vk14126_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5N_LN_2_vk14126 <- mutate(VH12_5N_LN_2_vk14126, SEM = apply(VH12_5N_LN_2_vk14126_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5N_LN_2_vk14126 <- mutate(VH12_5N_LN_2_vk14126, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5N_LN_2_vk14126 <- mutate(VH12_5N_LN_2_vk14126, SAMPLE = full_linear_VH12_1_5N_LN_2_vk14126$SAMPLE[1:4])
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_5P_LP_2_vk14126_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12_1_5P_LP_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12_2_5P_LP_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12_3_5P_LP_2_vk14126$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_5P_LP_2_vk14126 <- mutate(VH12_5P_LP_2_vk14126_stat, MEAN_SEQ_FREQ = apply(VH12_5P_LP_2_vk14126_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_5P_LP_2_vk14126 <- mutate(VH12_5P_LP_2_vk14126, SEM = apply(VH12_5P_LP_2_vk14126_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_5P_LP_2_vk14126 <- mutate(VH12_5P_LP_2_vk14126, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_5P_LP_2_vk14126 <- mutate(VH12_5P_LP_2_vk14126, SAMPLE = full_linear_VH12_1_5P_LP_2_vk14126$SAMPLE[1:4])
#
#
# VH12 RAG
#
# 5N_LN
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5N_LN_2_vk14126_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5N_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5N_LN_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5N_LN_2_vk14126$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5N_LN_2_vk14126 <- mutate(VH12_RAG_5N_LN_2_vk14126_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5N_LN_2_vk14126_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5N_LN_2_vk14126 <- mutate(VH12_RAG_5N_LN_2_vk14126, SEM = apply(VH12_RAG_5N_LN_2_vk14126_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5N_LN_2_vk14126 <- mutate(VH12_RAG_5N_LN_2_vk14126, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5N_LN_2_vk14126 <- mutate(VH12_RAG_5N_LN_2_vk14126, SAMPLE = full_linear_VH12RAG_1_5N_LN_2_vk14126$SAMPLE[1:4])
#
#
# 5P_LP
#
# Pull the sequence frequency data from each biological replicate into one data frame for statistics calculations
#
VH12_RAG_5P_LP_2_vk14126_stat <- data.frame( SEQ_FREQ_1 = full_linear_VH12RAG_1_5P_LP_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_2 = full_linear_VH12RAG_2_5P_LP_2_vk14126$SEQ_FREQ[1:4], SEQ_FREQ_3 = full_linear_VH12RAG_3_5P_LP_2_vk14126$SEQ_FREQ[1:4])
#
# Calculate the mean sequence frequency in the repertoire for each J gene
#
VH12_RAG_5P_LP_2_vk14126 <- mutate(VH12_RAG_5P_LP_2_vk14126_stat, MEAN_SEQ_FREQ = apply(VH12_RAG_5P_LP_2_vk14126_stat, 1, mean))
#
# Calculate the standard error of the mean for each J gene
#
VH12_RAG_5P_LP_2_vk14126 <- mutate(VH12_RAG_5P_LP_2_vk14126, SEM = apply(VH12_RAG_5P_LP_2_vk14126_stat, 1, sem))
#
# Add the list of J Genes to the data frame
#
VH12_RAG_5P_LP_2_vk14126 <- mutate(VH12_RAG_5P_LP_2_vk14126, J_GENES = J_GENES[1:4])
#
# Add the sample type to the data frame for grouping purposes
#
VH12_RAG_5P_LP_2_vk14126 <- mutate(VH12_RAG_5P_LP_2_vk14126, SAMPLE = full_linear_VH12RAG_1_5P_LP_2_vk14126$SAMPLE[1:4])
#
# Graphs
#
# Vk 3-7
#
# Combine the individual sample data frames into one summative data frame
#
full_graph_2_vk37 <- rbind(WT_5N_LN_2_vk37, RAG_5N_LN_2_vk37)
full_graph_2_vk37 <- rbind(full_graph_2_vk37, RAG_5P_LN_2_vk37)
full_graph_2_vk37 <- rbind(full_graph_2_vk37, RAG_5P_LP_2_vk37)
full_graph_2_vk37 <- rbind(full_graph_2_vk37, VH12_5N_LN_2_vk37)
full_graph_2_vk37 <- rbind(full_graph_2_vk37, VH12_5P_LP_2_vk37)
full_graph_2_vk37 <- rbind(full_graph_2_vk37, VH12_RAG_5N_LN_2_vk37)
full_graph_2_vk37 <- rbind(full_graph_2_vk37, VH12_RAG_5P_LP_2_vk37)
#
# Reorder the list of genes based on their locations in the light chain loci
#
full_graph_2_vk37$J_GENES <- gsubGene2NumJ(full_graph_2_vk37$J_GENES)
full_graph_2_vk37 <- full_graph_2_vk37[mixedorder(full_graph_2_vk37$J_GENES, decreasing=TRUE),]
full_graph_2_vk37$J_GENES <- gsubNum2GeneJ(full_graph_2_vk37$J_GENES)
full_graph_2_vk37$J_GENES <- factor(full_graph_2_vk37$J_GENES, levels=unique(full_graph_2_vk37$J_GENES))
#
# Reassign factors and levels for the sample types to maintain the desired order in the graphs
#
full_graph_2_vk37$SAMPLE <- factor(full_graph_2_vk37$SAMPLE, levels=c("WT CD5- PtC-", "dnRAG1 CD5- PtC-", "dnRAG1 CD5+ PtC-", "dnRAG1 CD5+ PtC+", "VH12 CD5- PtC-", "VH12 CD5+ PtC+", "dnRAG1 VH12 CD5- PtC-", "dnRAG1 VH12 CD5+ PtC+"))
#
# Set the position and dodge widths for uniform spacing in the graph
#
dodge<-position_dodge(width=0.9)
#
full_graph_2_vk37_plot <- ggplot(data=full_graph_2_vk37, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0.5, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Pairing with Vk37")+theme(plot.title = element_text(h=0.5, face="bold", size=60))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=60, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk37_plot.png", width=48, height=20)
#
# No title
#
full_graph_2_vk37_plot_no_title <- ggplot(data=full_graph_2_vk37, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge, show.legend=FALSE)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Usage")+theme(plot.title = element_text(h=0.5, face="bold", size=60, color="white"))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=60, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk37_plot_no_title.jpeg", width=48, height=20)
#
#
# VK 4-86
#
# Combine the individual sample data frames into one summative data frame
#
full_graph_2_vk486 <- rbind(WT_5N_LN_2_vk486, RAG_5N_LN_2_vk486)
full_graph_2_vk486 <- rbind(full_graph_2_vk486, RAG_5P_LN_2_vk486)
full_graph_2_vk486 <- rbind(full_graph_2_vk486, RAG_5P_LP_2_vk486)
full_graph_2_vk486 <- rbind(full_graph_2_vk486, VH12_5N_LN_2_vk486)
full_graph_2_vk486 <- rbind(full_graph_2_vk486, VH12_5P_LP_2_vk486)
full_graph_2_vk486 <- rbind(full_graph_2_vk486, VH12_RAG_5N_LN_2_vk486)
full_graph_2_vk486 <- rbind(full_graph_2_vk486, VH12_RAG_5P_LP_2_vk486)
#
# Reorder the list of genes based on their locations in the light chain loci
#
full_graph_2_vk486$J_GENES <- gsubGene2NumJ(full_graph_2_vk486$J_GENES)
full_graph_2_vk486 <- full_graph_2_vk486[mixedorder(full_graph_2_vk486$J_GENES, decreasing=TRUE),]
full_graph_2_vk486$J_GENES <- gsubNum2GeneJ(full_graph_2_vk486$J_GENES)
full_graph_2_vk486$J_GENES <- factor(full_graph_2_vk486$J_GENES, levels=unique(full_graph_2_vk486$J_GENES))
#
# Reassign factors and levels for the sample types to maintain the desired order in the graphs
#
full_graph_2_vk486$SAMPLE <- factor(full_graph_2_vk486$SAMPLE, levels=c("WT CD5- PtC-", "dnRAG1 CD5- PtC-", "dnRAG1 CD5+ PtC-", "dnRAG1 CD5+ PtC+", "VH12 CD5- PtC-", "VH12 CD5+ PtC+", "dnRAG1 VH12 CD5- PtC-", "dnRAG1 VH12 CD5+ PtC+"))
#
# Set the position and dodge widths for uniform spacing in the graph
#
dodge<-position_dodge(width=0.9)
#
full_graph_2_vk486_plot <- ggplot(data=full_graph_2_vk486, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0.5, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Pairing with Vk486")+theme(plot.title = element_text(h=0.5, face="bold", size=48))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=48, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk486_plot.png", width=48, height=20)
#
# No title
#
full_graph_2_vk486_plot_no_title <- ggplot(data=full_graph_2_vk486, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge, show.legend=FALSE)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0.5, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Usage")+theme(plot.title = element_text(h=0.5, face="bold", size=48, color="white"))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=48, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk486_plot_no_title.jpeg", width=48, height=20)
#
#
# Vk 4-91
#
# Combine the individual sample data frames into one summative data frame
#
full_graph_2_vk491 <- rbind(WT_5N_LN_2_vk491, RAG_5N_LN_2_vk491)
full_graph_2_vk491 <- rbind(full_graph_2_vk491, RAG_5P_LN_2_vk491)
full_graph_2_vk491 <- rbind(full_graph_2_vk491, RAG_5P_LP_2_vk491)
full_graph_2_vk491 <- rbind(full_graph_2_vk491, VH12_5N_LN_2_vk491)
full_graph_2_vk491 <- rbind(full_graph_2_vk491, VH12_5P_LP_2_vk491)
full_graph_2_vk491 <- rbind(full_graph_2_vk491, VH12_RAG_5N_LN_2_vk491)
full_graph_2_vk491 <- rbind(full_graph_2_vk491, VH12_RAG_5P_LP_2_vk491)
#
# Reorder the list of genes based on their locations in the light chain loci
#
full_graph_2_vk491$J_GENES <- gsubGene2NumJ(full_graph_2_vk491$J_GENES)
full_graph_2_vk491 <- full_graph_2_vk491[mixedorder(full_graph_2_vk491$J_GENES, decreasing=TRUE),]
full_graph_2_vk491$J_GENES <- gsubNum2GeneJ(full_graph_2_vk491$J_GENES)
full_graph_2_vk491$J_GENES <- factor(full_graph_2_vk491$J_GENES, levels=unique(full_graph_2_vk491$J_GENES))
#
# Reassign factors and levels for the sample types to maintain the desired order in the graphs
#
full_graph_2_vk491$SAMPLE <- factor(full_graph_2_vk491$SAMPLE, levels=c("WT CD5- PtC-", "dnRAG1 CD5- PtC-", "dnRAG1 CD5+ PtC-", "dnRAG1 CD5+ PtC+", "VH12 CD5- PtC-", "VH12 CD5+ PtC+", "dnRAG1 VH12 CD5- PtC-", "dnRAG1 VH12 CD5+ PtC+"))
#
# Set the position and dodge widths for uniform spacing in the graph
#
dodge<-position_dodge(width=0.9)
#
full_graph_2_vk491_plot <- ggplot(data=full_graph_2_vk491, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0.5, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Pairing with Vk491")+theme(plot.title = element_text(h=0.5, face="bold", size=48))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=48, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk491_plot.png", width=48, height=20)
#
# No Title
#
full_graph_2_vk491_plot_no_title <- ggplot(data=full_graph_2_vk491, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge, show.legend=FALSE)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0.5, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Usage")+theme(plot.title = element_text(h=0.5, face="bold", size=48, color="white"))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=48, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk491_plot_no_title.jpeg", width=48, height=20)
#
#
# Vk 1-110
#
# Combine the individual sample data frames into one summative data frame
#
full_graph_2_vk1110 <- rbind(WT_5N_LN_2_vk1110, RAG_5N_LN_2_vk1110)
full_graph_2_vk1110 <- rbind(full_graph_2_vk1110, RAG_5P_LN_2_vk1110)
full_graph_2_vk1110 <- rbind(full_graph_2_vk1110, RAG_5P_LP_2_vk1110)
full_graph_2_vk1110 <- rbind(full_graph_2_vk1110, VH12_5N_LN_2_vk1110)
full_graph_2_vk1110 <- rbind(full_graph_2_vk1110, VH12_5P_LP_2_vk1110)
full_graph_2_vk1110 <- rbind(full_graph_2_vk1110, VH12_RAG_5N_LN_2_vk1110)
full_graph_2_vk1110 <- rbind(full_graph_2_vk1110, VH12_RAG_5P_LP_2_vk1110)
#
# Reorder the list of genes based on their locations in the light chain loci
#
full_graph_2_vk1110$J_GENES <- gsubGene2NumJ(full_graph_2_vk1110$J_GENES)
full_graph_2_vk1110 <- full_graph_2_vk1110[mixedorder(full_graph_2_vk1110$J_GENES, decreasing=TRUE),]
full_graph_2_vk1110$J_GENES <- gsubNum2GeneJ(full_graph_2_vk1110$J_GENES)
full_graph_2_vk1110$J_GENES <- factor(full_graph_2_vk1110$J_GENES, levels=unique(full_graph_2_vk1110$J_GENES))
#
# Reassign factors and levels for the sample types to maintain the desired order in the graphs
#
full_graph_2_vk1110$SAMPLE <- factor(full_graph_2_vk1110$SAMPLE, levels=c("WT CD5- PtC-", "dnRAG1 CD5- PtC-", "dnRAG1 CD5+ PtC-", "dnRAG1 CD5+ PtC+", "VH12 CD5- PtC-", "VH12 CD5+ PtC+", "dnRAG1 VH12 CD5- PtC-", "dnRAG1 VH12 CD5+ PtC+"))
#
# Set the position and dodge widths for uniform spacing in the graph
#
dodge<-position_dodge(width=0.9)
#
full_graph_2_vk1110_plot <- ggplot(data=full_graph_2_vk1110, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0.5, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Pairing with Vk1110")+theme(plot.title = element_text(h=0.5, face="bold", size=48))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=48, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk1110_plot.png", width=48, height=20)
#
# No title
#
full_graph_2_vk1110_plot_no_title <- ggplot(data=full_graph_2_vk1110, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge, show.legend=FALSE)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0.5, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Usage")+theme(plot.title = element_text(h=0.5, face="bold", size=48, color="white"))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=48, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk1110_plot_no_title.jpeg", width=48, height=20)
#
#
# Vk 14-126
#
# Combine the individual sample data frames into one summative data frame
#
full_graph_2_vk14126 <- rbind(WT_5N_LN_2_vk14126, RAG_5N_LN_2_vk14126)
full_graph_2_vk14126 <- rbind(full_graph_2_vk14126, RAG_5P_LN_2_vk14126)
full_graph_2_vk14126 <- rbind(full_graph_2_vk14126, RAG_5P_LP_2_vk14126)
full_graph_2_vk14126 <- rbind(full_graph_2_vk14126, VH12_5N_LN_2_vk14126)
full_graph_2_vk14126 <- rbind(full_graph_2_vk14126, VH12_5P_LP_2_vk14126)
full_graph_2_vk14126 <- rbind(full_graph_2_vk14126, VH12_RAG_5N_LN_2_vk14126)
full_graph_2_vk14126 <- rbind(full_graph_2_vk14126, VH12_RAG_5P_LP_2_vk14126)
#
# Reorder the list of genes based on their locations in the light chain loci
#
full_graph_2_vk14126$J_GENES <- gsubGene2NumJ(full_graph_2_vk14126$J_GENES)
full_graph_2_vk14126 <- full_graph_2_vk14126[mixedorder(full_graph_2_vk14126$J_GENES, decreasing=TRUE),]
full_graph_2_vk14126$J_GENES <- gsubNum2GeneJ(full_graph_2_vk14126$J_GENES)
full_graph_2_vk14126$J_GENES <- factor(full_graph_2_vk14126$J_GENES, levels=unique(full_graph_2_vk14126$J_GENES))
#
# Reassign factors and levels for the sample types to maintain the desired order in the graphs
#
full_graph_2_vk14126$SAMPLE <- factor(full_graph_2_vk14126$SAMPLE, levels=c("WT CD5- PtC-", "dnRAG1 CD5- PtC-", "dnRAG1 CD5+ PtC-", "dnRAG1 CD5+ PtC+", "VH12 CD5- PtC-", "VH12 CD5+ PtC+", "dnRAG1 VH12 CD5- PtC-", "dnRAG1 VH12 CD5+ PtC+"))
#
# Set the position and dodge widths for uniform spacing in the graph
#
dodge<-position_dodge(width=0.9)
#
full_graph_2_vk14126_plot <- ggplot(data=full_graph_2_vk14126, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0.5, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Pairing with Vk14126")+theme(plot.title = element_text(h=0.5, face="bold", size=48))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=48, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk14126_plot.png", width=48, height=20)
#
# No title
#
full_graph_2_vk14126_plot_no_title <- ggplot(data=full_graph_2_vk14126, mapping=aes(x=J_GENES, y=MEAN_SEQ_FREQ))+geom_col(aes(fill=SAMPLE), position=dodge, show.legend=FALSE)+geom_errorbar(aes(ymin = MEAN_SEQ_FREQ-SEM, ymax = MEAN_SEQ_FREQ+SEM, group=SAMPLE,  linetype="blank"), position=dodge, width = 0.75, size = 4, show.legend=FALSE )+coord_cartesian(ylim =c(0, 1), expand = FALSE)+theme(axis.line=element_line(size=2))+theme(axis.text.x=element_text(angle=0, face="bold", size=60, hjust=0, vjust=0.5, color = "black"))+theme(axis.text.y=element_text(size=60, face="bold", hjust=0.5, vjust=0.5, color = "black"))+theme(panel.background=element_rect(fill="white"))+ggtitle("Light Chain Repertoire J Gene Usage")+theme(plot.title = element_text(h=0.5, face="bold", size=48, color="white"))+labs(x="\nGene Segment", y="Frequency in Repertoire\n")+theme(axis.title = element_text(face="bold", size=60))+theme(legend.key.size = unit(0.75, "in"))+theme(legend.text = element_text(size=48, face="bold"))+theme(legend.title=element_blank())+scale_fill_manual(values = cbf_sw)
#
# Save the graph as the desired filetype for download and use (.png is recommended but .jpeg was used to accomodate our version of Adobe Acrobat)
#
ggsave("full_graph_2_vk14126_plot_no_title.jpeg", width=48, height=20)
#
